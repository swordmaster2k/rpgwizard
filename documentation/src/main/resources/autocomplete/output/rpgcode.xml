<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE api SYSTEM "CompletionXml.dtd">
<api language="RPGCode">
    <environment paramStartChar="(" paramEndChar=")" paramSeparator=", " terminal=";"/>
    <keywords>
        <keyword name="rpg.getImage(file);" type="function" returnType="{Image.ImageInfo}" definedIn="rpg-api.js:line 151">
            <desc><![CDATA[<h4 class="name" id="getImage"> <a class="href-link" href="#getImage">#</a> <span class="code-name"> getImage<span class="signature">(file)</span><span class="type-signature"> → {Image.ImageInfo}</span> </span> </h4> 
<div class="description">
  Gets the image object if it has been loaded into the engine already, otherwise it returns undefined. 
</div> 
<h3>Parameters:</h3> 
<div class="table-container"> 
 <table class="params table"> 
  <thead> 
   <tr> 
    <th>Name</th> 
    <th>Type</th> 
    <th class="last">Description</th> 
   </tr> 
  </thead> 
  <tbody> 
   <tr class="deep-level-0"> 
    <td class="name"><code>file</code></td> 
    <td class="type"> <span class="param-type">string</span> </td> 
    <td class="description last">The relative file path to the image.</td> 
   </tr> 
  </tbody> 
 </table> 
</div> 
<dl class="details"> 
 <p class="tag-source"> <a href="rpg-api.js.html" class="button">View Source</a> <span> <a href="rpg-api.js.html">rpg-api.js</a>, <a href="rpg-api.js.html#line151">line 151</a> </span> </p> 
</dl> 
<div class="columns method-parameter"> 
 <div class="column is-2">
  <label>Returns:</label>
 </div> 
 <div class="column is-10"> 
  <div class="columns"> 
   <div class="param-desc column is-7">
    An object containing information about the image.
   </div> 
   <div class="column is-5 has-text-left"> 
    <label>Type: </label> 
    <span class="param-type">Image.ImageInfo</span> 
   </div> 
  </div> 
 </div> 
</div> 
<h3>Example</h3> 
<pre class="prettyprint"><code>const image = rpg.getImage("life.png");console.log(image.width);console.log(image.height);</code></pre>]]></desc>
        </keyword>
        <keyword name="rpg.isAssetLoaded(assetId, type);" type="function" returnType="{boolean}" definedIn="rpg-api.js:line 78">
            <desc><![CDATA[<h4 class="name" id="isAssetLoaded"> <a class="href-link" href="#isAssetLoaded">#</a> <span class="code-name"> isAssetLoaded<span class="signature">(assetId, type)</span><span class="type-signature"> → {boolean}</span> </span> </h4> 
<div class="description">
  Returns a true or false value indicating whether an asset is currently loaded. Note: For audio files use the identifier key, not the filename. 
</div> 
<h3>Parameters:</h3> 
<div class="table-container"> 
 <table class="params table"> 
  <thead> 
   <tr> 
    <th>Name</th> 
    <th>Type</th> 
    <th class="last">Description</th> 
   </tr> 
  </thead> 
  <tbody> 
   <tr class="deep-level-0"> 
    <td class="name"><code>assetId</code></td> 
    <td class="type"> <span class="param-type">string</span> </td> 
    <td class="description last">Id of the asset including any subfolders.</td> 
   </tr> 
   <tr class="deep-level-0"> 
    <td class="name"><code>type</code></td> 
    <td class="type"> <span class="param-type">string</span> </td> 
    <td class="description last">Either "image" or "audio".</td> 
   </tr> 
  </tbody> 
 </table> 
</div> 
<dl class="details"> 
 <p class="tag-source"> <a href="rpg-api.js.html" class="button">View Source</a> <span> <a href="rpg-api.js.html">rpg-api.js</a>, <a href="rpg-api.js.html#line78">line 78</a> </span> </p> 
</dl> 
<div class="columns method-parameter"> 
 <div class="column is-2">
  <label>Returns:</label>
 </div> 
 <div class="column is-10"> 
  <div class="columns"> 
   <div class="column is-5 has-text-left"> 
    <label>Type: </label> 
    <span class="param-type">boolean</span> 
   </div> 
  </div> 
 </div> 
</div> 
<h3>Example</h3> 
<pre class="prettyprint"><code>console.log(rpg.isAssetLoaded("Hero/attack_east.png", "image"));console.log(rpg.isAssetLoaded("intro", "audio"));</code></pre>]]></desc>
        </keyword>
        <keyword name="rpg.loadAssets(assets);" type="function" returnType="undefined" definedIn="rpg-api.js:line 107">
            <desc><![CDATA[<h4 class="name" id="loadAssets"> <a class="href-link" href="#loadAssets">#</a> <span class="tag">async</span> <span class="code-name"> loadAssets<span class="signature">(assets)</span><span class="type-signature"></span> </span> </h4> 
<div class="description">
  Loads the requested assets into the engine. For more information, see 
 <a href="tutorial-03-Asset-Management.html">Asset Management</a> 
</div> 
<h3>Parameters:</h3> 
<div class="table-container"> 
 <table class="params table"> 
  <thead> 
   <tr> 
    <th>Name</th> 
    <th>Type</th> 
    <th class="last">Description</th> 
   </tr> 
  </thead> 
  <tbody> 
   <tr class="deep-level-0"> 
    <td class="name"><code>assets</code></td> 
    <td class="type"> <span class="param-type">Object</span> </td> 
    <td class="description last"></td> 
   </tr> 
  </tbody> 
 </table> 
</div> 
<dl class="details"> 
 <p class="tag-source"> <a href="rpg-api.js.html" class="button">View Source</a> <span> <a href="rpg-api.js.html">rpg-api.js</a>, <a href="rpg-api.js.html#line107">line 107</a> </span> </p> 
</dl> 
<h3>Example</h3> 
<pre class="prettyprint"><code>// Assets we want to loadconst assets = { "audio": {     "intro": "intro.mp3" }, "images": [     "block.png",     "mwin_small.png",     "sword_profile_1_small.png",     "startscreen.png" ]};// Wait for the assets to loadawait rpg.loadAssets(assets);</code></pre>]]></desc>
        </keyword>
        <keyword name="rpg.loadJson(path);" type="function" returnType="undefined" definedIn="rpg-api.js:line 165">
            <desc><![CDATA[<h4 class="name" id="loadJson"> <a class="href-link" href="#loadJson">#</a> <span class="tag">async</span> <span class="code-name"> loadJson<span class="signature">(path)</span><span class="type-signature"></span> </span> </h4> 
<div class="description">
  TODO 
</div> 
<h3>Parameters:</h3> 
<div class="table-container"> 
 <table class="params table"> 
  <thead> 
   <tr> 
    <th>Name</th> 
    <th>Type</th> 
    <th class="last">Description</th> 
   </tr> 
  </thead> 
  <tbody> 
   <tr class="deep-level-0"> 
    <td class="name"><code>path</code></td> 
    <td class="type"> <span class="param-type">string</span> </td> 
    <td class="description last">TODO</td> 
   </tr> 
  </tbody> 
 </table> 
</div> 
<dl class="details"> 
 <p class="tag-source"> <a href="rpg-api.js.html" class="button">View Source</a> <span> <a href="rpg-api.js.html">rpg-api.js</a>, <a href="rpg-api.js.html#line165">line 165</a> </span> </p> 
</dl> 
<div class="columns method-parameter"> 
 <div class="column is-2">
  <label>Returns:</label>
 </div> 
 <div class="column is-10"> 
  <div class="columns"> 
   <div class="param-desc column is-7">
    TODO
   </div> 
  </div> 
 </div> 
</div> 
<h3>Example</h3> 
<pre class="prettyprint"><code>// TODO</code></pre>]]></desc>
        </keyword>
        <keyword name="rpg.removeAssets(assets);" type="function" returnType="undefined" definedIn="rpg-api.js:line 134">
            <desc><![CDATA[<h4 class="name" id="removeAssets"> <a class="href-link" href="#removeAssets">#</a> <span class="code-name"> removeAssets<span class="signature">(assets)</span><span class="type-signature"></span> </span> </h4> 
<div class="description">
  Removes assets from the engine and frees up the memory allocated to them. 
</div> 
<h3>Parameters:</h3> 
<div class="table-container"> 
 <table class="params table"> 
  <thead> 
   <tr> 
    <th>Name</th> 
    <th>Type</th> 
    <th class="last">Description</th> 
   </tr> 
  </thead> 
  <tbody> 
   <tr class="deep-level-0"> 
    <td class="name"><code>assets</code></td> 
    <td class="type"> <span class="param-type">Object</span> </td> 
    <td class="description last">TODO</td> 
   </tr> 
  </tbody> 
 </table> 
</div> 
<dl class="details"> 
 <p class="tag-source"> <a href="rpg-api.js.html" class="button">View Source</a> <span> <a href="rpg-api.js.html">rpg-api.js</a>, <a href="rpg-api.js.html#line134">line 134</a> </span> </p> 
</dl> 
<h3>Example</h3> 
<pre class="prettyprint"><code>// Assets we want to removeconst assets = { "audio": {     "intro": "intro.mp3" }, "images": [     "block.png",     "mwin_small.png",     "sword_profile_1_small.png",     "startscreen.png" ]};// Remove some assets after userpg.removeAssets(assets);</code></pre>]]></desc>
        </keyword>
        <keyword name="rpg.saveJson(json);" type="function" returnType="undefined" definedIn="rpg-api.js:line 188">
            <desc><![CDATA[<h4 class="name" id="saveJson"> <a class="href-link" href="#saveJson">#</a> <span class="tag">async</span> <span class="code-name"> saveJson<span class="signature">(json)</span><span class="type-signature"></span> </span> </h4> 
<div class="description">
  TODO 
</div> 
<h3>Parameters:</h3> 
<div class="table-container"> 
 <table class="params table"> 
  <thead> 
   <tr> 
    <th>Name</th> 
    <th>Type</th> 
    <th class="last">Description</th> 
   </tr> 
  </thead> 
  <tbody> 
   <tr class="deep-level-0"> 
    <td class="name"><code>json</code></td> 
    <td class="type"> <span class="param-type">string</span> </td> 
    <td class="description last">TODO</td> 
   </tr> 
  </tbody> 
 </table> 
</div> 
<dl class="details"> 
 <p class="tag-source"> <a href="rpg-api.js.html" class="button">View Source</a> <span> <a href="rpg-api.js.html">rpg-api.js</a>, <a href="rpg-api.js.html#line188">line 188</a> </span> </p> 
</dl> 
<h3>Example</h3> 
<pre class="prettyprint"><code>// TODO</code></pre>]]></desc>
        </keyword>
        <keyword name="rpg.playAudio(id, loop, volumeopt);" type="function" returnType="undefined" definedIn="rpg-api.js:line 1511">
            <desc><![CDATA[<h4 class="name" id="playAudio"> <a class="href-link" href="#playAudio">#</a> <span class="code-name"> playAudio<span class="signature">(id, loop, volume<span class="signature-attributes">opt</span>)</span><span class="type-signature"></span> </span> </h4> 
<div class="description">
  Plays the supplied audio file, up to five audio channels can be active at once. 
</div> 
<h3>Parameters:</h3> 
<div class="table-container"> 
 <table class="params table"> 
  <thead> 
   <tr> 
    <th>Name</th> 
    <th>Type</th> 
    <th>Attributes</th> 
    <th>Default</th> 
    <th class="last">Description</th> 
   </tr> 
  </thead> 
  <tbody> 
   <tr class="deep-level-0"> 
    <td class="name"><code>id</code></td> 
    <td class="type"> <span class="param-type">string</span> </td> 
    <td class="attributes"> </td> 
    <td class="default"> </td> 
    <td class="description last">ID of the audio file.</td> 
   </tr> 
   <tr class="deep-level-0"> 
    <td class="name"><code>loop</code></td> 
    <td class="type"> <span class="param-type">boolean</span> </td> 
    <td class="attributes"> </td> 
    <td class="default"> </td> 
    <td class="description last">Whether to loop this audio.</td> 
   </tr> 
   <tr class="deep-level-0"> 
    <td class="name"><code>volume</code></td> 
    <td class="type"> <span class="param-type">number</span> </td> 
    <td class="attributes"> &lt;optional&gt;<br> </td> 
    <td class="default"> 1.0 </td> 
    <td class="description last">Value ranging from 1.0 to 0.0, default is 1.0 (i.e. 100%).</td> 
   </tr> 
  </tbody> 
 </table> 
</div> 
<dl class="details"> 
 <p class="tag-source"> <a href="rpg-api.js.html" class="button">View Source</a> <span> <a href="rpg-api.js.html">rpg-api.js</a>, <a href="rpg-api.js.html#line1511">line 1511</a> </span> </p> 
</dl> 
<h3>Example</h3> 
<pre class="prettyprint"><code>rpg.playAudio("intro", false, 1.0)</code></pre>]]></desc>
        </keyword>
        <keyword name="rpg.stopAudio(id);" type="function" returnType="undefined" definedIn="rpg-api.js:line 1529">
            <desc><![CDATA[<h4 class="name" id="stopAudio"> <a class="href-link" href="#stopAudio">#</a> <span class="code-name"> stopAudio<span class="signature">(id)</span><span class="type-signature"></span> </span> </h4> 
<div class="description">
  Stops the audio, if no id is specified then all audio is stopped. 
</div> 
<h3>Parameters:</h3> 
<div class="table-container"> 
 <table class="params table"> 
  <thead> 
   <tr> 
    <th>Name</th> 
    <th>Type</th> 
    <th class="last">Description</th> 
   </tr> 
  </thead> 
  <tbody> 
   <tr class="deep-level-0"> 
    <td class="name"><code>id</code></td> 
    <td class="type"> <span class="param-type">string</span> </td> 
    <td class="description last">ID of the audio file.</td> 
   </tr> 
  </tbody> 
 </table> 
</div> 
<dl class="details"> 
 <p class="tag-source"> <a href="rpg-api.js.html" class="button">View Source</a> <span> <a href="rpg-api.js.html">rpg-api.js</a>, <a href="rpg-api.js.html#line1529">line 1529</a> </span> </p> 
</dl> 
<h3>Example</h3> 
<pre class="prettyprint"><code>// Stop all audiorpg.stopAudio();// Stop a specific audio channelrpg.stopAudio("intro");</code></pre>]]></desc>
        </keyword>
        <keyword name="rpg.clear(canvasId);" type="function" returnType="undefined" definedIn="rpg-api.js:line 264">
            <desc><![CDATA[<h4 class="name" id="clear"> <a class="href-link" href="#clear">#</a> <span class="code-name"> clear<span class="signature">(canvasId)</span><span class="type-signature"></span> </span> </h4> 
<div class="description">
  Clears the contents of a canvas. 
</div> 
<h3>Parameters:</h3> 
<div class="table-container"> 
 <table class="params table"> 
  <thead> 
   <tr> 
    <th>Name</th> 
    <th>Type</th> 
    <th class="last">Description</th> 
   </tr> 
  </thead> 
  <tbody> 
   <tr class="deep-level-0"> 
    <td class="name"><code>canvasId</code></td> 
    <td class="type"> <span class="param-type">string</span> </td> 
    <td class="description last">ID of the canvas to clear.</td> 
   </tr> 
  </tbody> 
 </table> 
</div> 
<dl class="details"> 
 <p class="tag-source"> <a href="rpg-api.js.html" class="button">View Source</a> <span> <a href="rpg-api.js.html">rpg-api.js</a>, <a href="rpg-api.js.html#line264">line 264</a> </span> </p> 
</dl> 
<h3>Example</h3> 
<pre class="prettyprint"><code>rpg.clear("my-canvas");</code></pre>]]></desc>
        </keyword>
        <keyword name="rpg.createCanvas(canvasId, width, height);" type="function" returnType="undefined" definedIn="rpg-api.js:line 217">
            <desc><![CDATA[<h4 class="name" id="createCanvas"> <a class="href-link" href="#createCanvas">#</a> <span class="code-name"> createCanvas<span class="signature">(canvasId, width, height)</span><span class="type-signature"></span> </span> </h4> 
<div class="description">
  Creates a canvas with the specified width, height, and ID. This canvas will not be drawn until render is called with its ID. 
</div> 
<h3>Parameters:</h3> 
<div class="table-container"> 
 <table class="params table"> 
  <thead> 
   <tr> 
    <th>Name</th> 
    <th>Type</th> 
    <th class="last">Description</th> 
   </tr> 
  </thead> 
  <tbody> 
   <tr class="deep-level-0"> 
    <td class="name"><code>canvasId</code></td> 
    <td class="type"> <span class="param-type">string</span> </td> 
    <td class="description last">ID to assign to the canvas.</td> 
   </tr> 
   <tr class="deep-level-0"> 
    <td class="name"><code>width</code></td> 
    <td class="type"> <span class="param-type">number</span> </td> 
    <td class="description last">In pixels.</td> 
   </tr> 
   <tr class="deep-level-0"> 
    <td class="name"><code>height</code></td> 
    <td class="type"> <span class="param-type">number</span> </td> 
    <td class="description last">In pixels.</td> 
   </tr> 
  </tbody> 
 </table> 
</div> 
<dl class="details"> 
 <p class="tag-source"> <a href="rpg-api.js.html" class="button">View Source</a> <span> <a href="rpg-api.js.html">rpg-api.js</a>, <a href="rpg-api.js.html#line217">line 217</a> </span> </p> 
</dl> 
<h3>Example</h3> 
<pre class="prettyprint"><code>rpg.createCanvas("my-canvas", 640, 480);rpg.drawText("my-canvas", 270, 300, "Hello world!");rpg.render("my-canvas");</code></pre>]]></desc>
        </keyword>
        <keyword name="rpg.removeCanvas(canvasId);" type="function" returnType="undefined" definedIn="rpg-api.js:line 234">
            <desc><![CDATA[<h4 class="name" id="removeCanvas"> <a class="href-link" href="#removeCanvas">#</a> <span class="code-name"> removeCanvas<span class="signature">(canvasId)</span><span class="type-signature"></span> </span> </h4> 
<div class="description">
  Removes the canvas with the assigned ID from the engine. 
</div> 
<h3>Parameters:</h3> 
<div class="table-container"> 
 <table class="params table"> 
  <thead> 
   <tr> 
    <th>Name</th> 
    <th>Type</th> 
    <th class="last">Description</th> 
   </tr> 
  </thead> 
  <tbody> 
   <tr class="deep-level-0"> 
    <td class="name"><code>canvasId</code></td> 
    <td class="type"> <span class="param-type">string</span> </td> 
    <td class="description last">ID of the canvas to remove.</td> 
   </tr> 
  </tbody> 
 </table> 
</div> 
<dl class="details"> 
 <p class="tag-source"> <a href="rpg-api.js.html" class="button">View Source</a> <span> <a href="rpg-api.js.html">rpg-api.js</a>, <a href="rpg-api.js.html#line234">line 234</a> </span> </p> 
</dl> 
<h3>Example</h3> 
<pre class="prettyprint"><code>rpg.removeCanvas("my-canvas");</code></pre>]]></desc>
        </keyword>
        <keyword name="rpg.render(canvasId);" type="function" returnType="undefined" definedIn="rpg-api.js:line 247">
            <desc><![CDATA[<h4 class="name" id="render"> <a class="href-link" href="#render">#</a> <span class="code-name"> render<span class="signature">(canvasId)</span><span class="type-signature"></span> </span> </h4> 
<div class="description">
  Renders a canvas to the screen. 
</div> 
<h3>Parameters:</h3> 
<div class="table-container"> 
 <table class="params table"> 
  <thead> 
   <tr> 
    <th>Name</th> 
    <th>Type</th> 
    <th class="last">Description</th> 
   </tr> 
  </thead> 
  <tbody> 
   <tr class="deep-level-0"> 
    <td class="name"><code>canvasId</code></td> 
    <td class="type"> <span class="param-type">string</span> </td> 
    <td class="description last">ID of the canvas to render.</td> 
   </tr> 
  </tbody> 
 </table> 
</div> 
<dl class="details"> 
 <p class="tag-source"> <a href="rpg-api.js.html" class="button">View Source</a> <span> <a href="rpg-api.js.html">rpg-api.js</a>, <a href="rpg-api.js.html#line247">line 247</a> </span> </p> 
</dl> 
<h3>Example</h3> 
<pre class="prettyprint"><code>rpg.render("my-canvas");</code></pre>]]></desc>
        </keyword>
        <keyword name="rpg.setCanvasPosition(canvasId, x, y);" type="function" returnType="undefined" definedIn="rpg-api.js:line 285">
            <desc><![CDATA[<h4 class="name" id="setCanvasPosition"> <a class="href-link" href="#setCanvasPosition">#</a> <span class="code-name"> setCanvasPosition<span class="signature">(canvasId, x, y)</span><span class="type-signature"></span> </span> </h4> 
<div class="description">
  Sets the canvas's position relative to the viewport. 
</div> 
<h3>Parameters:</h3> 
<div class="table-container"> 
 <table class="params table"> 
  <thead> 
   <tr> 
    <th>Name</th> 
    <th>Type</th> 
    <th class="last">Description</th> 
   </tr> 
  </thead> 
  <tbody> 
   <tr class="deep-level-0"> 
    <td class="name"><code>canvasId</code></td> 
    <td class="type"> <span class="param-type">string</span> </td> 
    <td class="description last">ID of the canvas to move.</td> 
   </tr> 
   <tr class="deep-level-0"> 
    <td class="name"><code>x</code></td> 
    <td class="type"> <span class="param-type">number</span> </td> 
    <td class="description last">In pixels.</td> 
   </tr> 
   <tr class="deep-level-0"> 
    <td class="name"><code>y</code></td> 
    <td class="type"> <span class="param-type">number</span> </td> 
    <td class="description last">In pixels.</td> 
   </tr> 
  </tbody> 
 </table> 
</div> 
<dl class="details"> 
 <p class="tag-source"> <a href="rpg-api.js.html" class="button">View Source</a> <span> <a href="rpg-api.js.html">rpg-api.js</a>, <a href="rpg-api.js.html#line285">line 285</a> </span> </p> 
</dl> 
<h3>Example</h3> 
<pre class="prettyprint"><code>rpg.setCanvasPosition("my-canvas", 100, 100);</code></pre>]]></desc>
        </keyword>
        <keyword name="rpg.drawCircle(canvasId, x, y, radius);" type="function" returnType="undefined" definedIn="rpg-api.js:line 453">
            <desc><![CDATA[<h4 class="name" id="drawCircle"> <a class="href-link" href="#drawCircle">#</a> <span class="code-name"> drawCircle<span class="signature">(canvasId, x, y, radius)</span><span class="type-signature"></span> </span> </h4> 
<div class="description">
  Draws a circle onto the canvas. 
</div> 
<h3>Parameters:</h3> 
<div class="table-container"> 
 <table class="params table"> 
  <thead> 
   <tr> 
    <th>Name</th> 
    <th>Type</th> 
    <th class="last">Description</th> 
   </tr> 
  </thead> 
  <tbody> 
   <tr class="deep-level-0"> 
    <td class="name"><code>canvasId</code></td> 
    <td class="type"> <span class="param-type">string</span> </td> 
    <td class="description last">ID of the canvas.</td> 
   </tr> 
   <tr class="deep-level-0"> 
    <td class="name"><code>x</code></td> 
    <td class="type"> <span class="param-type">number</span> </td> 
    <td class="description last">In pixels.</td> 
   </tr> 
   <tr class="deep-level-0"> 
    <td class="name"><code>y</code></td> 
    <td class="type"> <span class="param-type">number</span> </td> 
    <td class="description last">In pixels.</td> 
   </tr> 
   <tr class="deep-level-0"> 
    <td class="name"><code>radius</code></td> 
    <td class="type"> <span class="param-type">number</span> </td> 
    <td class="description last">In pixels.</td> 
   </tr> 
  </tbody> 
 </table> 
</div> 
<dl class="details"> 
 <p class="tag-source"> <a href="rpg-api.js.html" class="button">View Source</a> <span> <a href="rpg-api.js.html">rpg-api.js</a>, <a href="rpg-api.js.html#line453">line 453</a> </span> </p> 
</dl> 
<h3>Example</h3> 
<pre class="prettyprint"><code>// Create a canvas and draw a red circle on itrpgcode.createCanvas("my-canvas", 640, 480);rpgcode.setColor(255, 0, 0, 1.0);rpgcode.drawCircle("my-canvas", 100, 100, 25);rpgcode.render("my-canvas");</code></pre>]]></desc>
        </keyword>
        <keyword name="rpg.drawImage(canvasId, file, x, y, width, height, rotation);" type="function" returnType="undefined" definedIn="rpg-api.js:line 478">
            <desc><![CDATA[<h4 class="name" id="drawImage"> <a class="href-link" href="#drawImage">#</a> <span class="code-name"> drawImage<span class="signature">(canvasId, file, x, y, width, height, rotation)</span><span class="type-signature"></span> </span> </h4> 
<div class="description">
  Draws an image onto a canvas. 
</div> 
<h3>Parameters:</h3> 
<div class="table-container"> 
 <table class="params table"> 
  <thead> 
   <tr> 
    <th>Name</th> 
    <th>Type</th> 
    <th class="last">Description</th> 
   </tr> 
  </thead> 
  <tbody> 
   <tr class="deep-level-0"> 
    <td class="name"><code>canvasId</code></td> 
    <td class="type"> <span class="param-type">string</span> </td> 
    <td class="description last">ID of the canvas.</td> 
   </tr> 
   <tr class="deep-level-0"> 
    <td class="name"><code>file</code></td> 
    <td class="type"> <span class="param-type">string</span> </td> 
    <td class="description last">The relative path to the image.</td> 
   </tr> 
   <tr class="deep-level-0"> 
    <td class="name"><code>x</code></td> 
    <td class="type"> <span class="param-type">number</span> </td> 
    <td class="description last">In pixels.</td> 
   </tr> 
   <tr class="deep-level-0"> 
    <td class="name"><code>y</code></td> 
    <td class="type"> <span class="param-type">number</span> </td> 
    <td class="description last">In pixels.</td> 
   </tr> 
   <tr class="deep-level-0"> 
    <td class="name"><code>width</code></td> 
    <td class="type"> <span class="param-type">number</span> </td> 
    <td class="description last">In pixels.</td> 
   </tr> 
   <tr class="deep-level-0"> 
    <td class="name"><code>height</code></td> 
    <td class="type"> <span class="param-type">number</span> </td> 
    <td class="description last">In pixels.</td> 
   </tr> 
   <tr class="deep-level-0"> 
    <td class="name"><code>rotation</code></td> 
    <td class="type"> <span class="param-type">number</span> </td> 
    <td class="description last">In radians.</td> 
   </tr> 
  </tbody> 
 </table> 
</div> 
<dl class="details"> 
 <p class="tag-source"> <a href="rpg-api.js.html" class="button">View Source</a> <span> <a href="rpg-api.js.html">rpg-api.js</a>, <a href="rpg-api.js.html#line478">line 478</a> </span> </p> 
</dl> 
<h3>Example</h3> 
<pre class="prettyprint"><code>rpg.drawImage("life-icon", 0, 0, 32, 32, 0);rpg.render("my-canvas");</code></pre>]]></desc>
        </keyword>
        <keyword name="rpg.drawImagePart(canvasId, file, srcX, srcY, srcWidth, srcHeight, destX, destY, destWidth, destHeight, rotation);" type="function" returnType="undefined" definedIn="rpg-api.js:line 508">
            <desc><![CDATA[<h4 class="name" id="drawImagePart"> <a class="href-link" href="#drawImagePart">#</a> <span class="code-name"> drawImagePart<span class="signature">(canvasId, file, srcX, srcY, srcWidth, srcHeight, destX, destY, destWidth, destHeight, rotation)</span><span class="type-signature"></span> </span> </h4> 
<div class="description">
  Draws part of image an onto a canvas. 
</div> 
<h3>Parameters:</h3> 
<div class="table-container"> 
 <table class="params table"> 
  <thead> 
   <tr> 
    <th>Name</th> 
    <th>Type</th> 
    <th class="last">Description</th> 
   </tr> 
  </thead> 
  <tbody> 
   <tr class="deep-level-0"> 
    <td class="name"><code>canvasId</code></td> 
    <td class="type"> <span class="param-type">string</span> </td> 
    <td class="description last">ID of the canvas.</td> 
   </tr> 
   <tr class="deep-level-0"> 
    <td class="name"><code>file</code></td> 
    <td class="type"> <span class="param-type">string</span> </td> 
    <td class="description last">The relative path to the image.</td> 
   </tr> 
   <tr class="deep-level-0"> 
    <td class="name"><code>srcX</code></td> 
    <td class="type"> <span class="param-type">number</span> </td> 
    <td class="description last">The start position x in pixels from the source image.</td> 
   </tr> 
   <tr class="deep-level-0"> 
    <td class="name"><code>srcY</code></td> 
    <td class="type"> <span class="param-type">number</span> </td> 
    <td class="description last">The start position y in pixels from the source image.</td> 
   </tr> 
   <tr class="deep-level-0"> 
    <td class="name"><code>srcWidth</code></td> 
    <td class="type"> <span class="param-type">number</span> </td> 
    <td class="description last">In pixels from the source image.</td> 
   </tr> 
   <tr class="deep-level-0"> 
    <td class="name"><code>srcHeight</code></td> 
    <td class="type"> <span class="param-type">number</span> </td> 
    <td class="description last">In pixels from the source image.</td> 
   </tr> 
   <tr class="deep-level-0"> 
    <td class="name"><code>destX</code></td> 
    <td class="type"> <span class="param-type">number</span> </td> 
    <td class="description last">The start position x in pixels on the destination canvas.</td> 
   </tr> 
   <tr class="deep-level-0"> 
    <td class="name"><code>destY</code></td> 
    <td class="type"> <span class="param-type">number</span> </td> 
    <td class="description last">The start position y in pixels on the destination canvas.</td> 
   </tr> 
   <tr class="deep-level-0"> 
    <td class="name"><code>destWidth</code></td> 
    <td class="type"> <span class="param-type">number</span> </td> 
    <td class="description last">In pixels on the destination canvas.</td> 
   </tr> 
   <tr class="deep-level-0"> 
    <td class="name"><code>destHeight</code></td> 
    <td class="type"> <span class="param-type">number</span> </td> 
    <td class="description last">In pixels on the destination canvas.</td> 
   </tr> 
   <tr class="deep-level-0"> 
    <td class="name"><code>rotation</code></td> 
    <td class="type"> <span class="param-type">number</span> </td> 
    <td class="description last">In radians.</td> 
   </tr> 
  </tbody> 
 </table> 
</div> 
<dl class="details"> 
 <p class="tag-source"> <a href="rpg-api.js.html" class="button">View Source</a> <span> <a href="rpg-api.js.html">rpg-api.js</a>, <a href="rpg-api.js.html#line508">line 508</a> </span> </p> 
</dl> 
<h3>Example</h3> 
<pre class="prettyprint"><code>// Draw part of the image onto the canvas we specifiedrpg.drawImagePart("life-icon", "life.png", 0, 0, 8, 8, 0, 0, 32, 32, 0);rpg.render("my-canvas");</code></pre>]]></desc>
        </keyword>
        <keyword name="rpg.drawLine(canvasId, x1, y1, x2, y2, lineWidth);" type="function" returnType="undefined" definedIn="rpg-api.js:line 532">
            <desc><![CDATA[<h4 class="name" id="drawLine"> <a class="href-link" href="#drawLine">#</a> <span class="code-name"> drawLine<span class="signature">(canvasId, x1, y1, x2, y2, lineWidth)</span><span class="type-signature"></span> </span> </h4> 
<div class="description">
  Draws a line onto the canvas. 
</div> 
<h3>Parameters:</h3> 
<div class="table-container"> 
 <table class="params table"> 
  <thead> 
   <tr> 
    <th>Name</th> 
    <th>Type</th> 
    <th class="last">Description</th> 
   </tr> 
  </thead> 
  <tbody> 
   <tr class="deep-level-0"> 
    <td class="name"><code>canvasId</code></td> 
    <td class="type"> <span class="param-type">string</span> </td> 
    <td class="description last">ID of the canvas.</td> 
   </tr> 
   <tr class="deep-level-0"> 
    <td class="name"><code>x1</code></td> 
    <td class="type"> <span class="param-type">number</span> </td> 
    <td class="description last">In pixels.</td> 
   </tr> 
   <tr class="deep-level-0"> 
    <td class="name"><code>y1</code></td> 
    <td class="type"> <span class="param-type">number</span> </td> 
    <td class="description last">In pixels.</td> 
   </tr> 
   <tr class="deep-level-0"> 
    <td class="name"><code>x2</code></td> 
    <td class="type"> <span class="param-type">number</span> </td> 
    <td class="description last">In pixels.</td> 
   </tr> 
   <tr class="deep-level-0"> 
    <td class="name"><code>y2</code></td> 
    <td class="type"> <span class="param-type">number</span> </td> 
    <td class="description last">In pixels.</td> 
   </tr> 
   <tr class="deep-level-0"> 
    <td class="name"><code>lineWidth</code></td> 
    <td class="type"> <span class="param-type">number</span> </td> 
    <td class="description last">In pixels.</td> 
   </tr> 
  </tbody> 
 </table> 
</div> 
<dl class="details"> 
 <p class="tag-source"> <a href="rpg-api.js.html" class="button">View Source</a> <span> <a href="rpg-api.js.html">rpg-api.js</a>, <a href="rpg-api.js.html#line532">line 532</a> </span> </p> 
</dl> 
<h3>Example</h3> 
<pre class="prettyprint"><code>rpg.drawLine("my-canvas", 25, 25, 50, 50, 1);rpg.render("my-canvas");</code></pre>]]></desc>
        </keyword>
        <keyword name="rpg.drawOntoCanvas(targetId, sourceId, x, y, width, height);" type="function" returnType="undefined" definedIn="rpg-api.js:line 428">
            <desc><![CDATA[<h4 class="name" id="drawOntoCanvas"> <a class="href-link" href="#drawOntoCanvas">#</a> <span class="code-name"> drawOntoCanvas<span class="signature">(targetId, sourceId, x, y, width, height)</span><span class="type-signature"></span> </span> </h4> 
<div class="description">
  Draws the source canvas onto the target canvas. Useful for combining multiple canvases together. 
</div> 
<h3>Parameters:</h3> 
<div class="table-container"> 
 <table class="params table"> 
  <thead> 
   <tr> 
    <th>Name</th> 
    <th>Type</th> 
    <th class="last">Description</th> 
   </tr> 
  </thead> 
  <tbody> 
   <tr class="deep-level-0"> 
    <td class="name"><code>targetId</code></td> 
    <td class="type"> <span class="param-type">string</span> </td> 
    <td class="description last">The ID of the target canvas.</td> 
   </tr> 
   <tr class="deep-level-0"> 
    <td class="name"><code>sourceId</code></td> 
    <td class="type"> <span class="param-type">string</span> </td> 
    <td class="description last">The ID of the source canvas.</td> 
   </tr> 
   <tr class="deep-level-0"> 
    <td class="name"><code>x</code></td> 
    <td class="type"> <span class="param-type">number</span> </td> 
    <td class="description last">In pixels.</td> 
   </tr> 
   <tr class="deep-level-0"> 
    <td class="name"><code>y</code></td> 
    <td class="type"> <span class="param-type">number</span> </td> 
    <td class="description last">In pixels.</td> 
   </tr> 
   <tr class="deep-level-0"> 
    <td class="name"><code>width</code></td> 
    <td class="type"> <span class="param-type">number</span> </td> 
    <td class="description last">In pixels.</td> 
   </tr> 
   <tr class="deep-level-0"> 
    <td class="name"><code>height</code></td> 
    <td class="type"> <span class="param-type">number</span> </td> 
    <td class="description last">In pixels.</td> 
   </tr> 
  </tbody> 
 </table> 
</div> 
<dl class="details"> 
 <p class="tag-source"> <a href="rpg-api.js.html" class="button">View Source</a> <span> <a href="rpg-api.js.html">rpg-api.js</a>, <a href="rpg-api.js.html#line428">line 428</a> </span> </p> 
</dl> 
<h3>Example</h3> 
<pre class="prettyprint"><code>// Load assetsconst assets = {     "images": [ "life.png" ]};await rpg.loadAssets(assets);// Source canvasrpg.createCanvas("life-icon", 32, 32);rpg.drawImage("life.png", 0, 0, 32, 32, 0);// Target canvasrpg.createCanvas("buffer", 640, 480);// Draw 3 hearts onto the buffer canvasfor (let i = 1; i &lt; 4; i++) {     rpg.drawOntoCanvas("buffer", "life-icon", i * 32, 430, 32, 32);}rpg.render("buffer");</code></pre>]]></desc>
        </keyword>
        <keyword name="rpg.drawRect(canvasId, x, y, width, height, lineWidth);" type="function" returnType="undefined" definedIn="rpg-api.js:line 556">
            <desc><![CDATA[<h4 class="name" id="drawRect"> <a class="href-link" href="#drawRect">#</a> <span class="code-name"> drawRect<span class="signature">(canvasId, x, y, width, height, lineWidth)</span><span class="type-signature"></span> </span> </h4> 
<div class="description">
  Draws a rectangle onto the canvas. 
</div> 
<h3>Parameters:</h3> 
<div class="table-container"> 
 <table class="params table"> 
  <thead> 
   <tr> 
    <th>Name</th> 
    <th>Type</th> 
    <th class="last">Description</th> 
   </tr> 
  </thead> 
  <tbody> 
   <tr class="deep-level-0"> 
    <td class="name"><code>canvasId</code></td> 
    <td class="type"> <span class="param-type">string</span> </td> 
    <td class="description last">ID of the canvas.</td> 
   </tr> 
   <tr class="deep-level-0"> 
    <td class="name"><code>x</code></td> 
    <td class="type"> <span class="param-type">number</span> </td> 
    <td class="description last">In pixels.</td> 
   </tr> 
   <tr class="deep-level-0"> 
    <td class="name"><code>y</code></td> 
    <td class="type"> <span class="param-type">number</span> </td> 
    <td class="description last">In pixels.</td> 
   </tr> 
   <tr class="deep-level-0"> 
    <td class="name"><code>width</code></td> 
    <td class="type"> <span class="param-type">number</span> </td> 
    <td class="description last">In pixels.</td> 
   </tr> 
   <tr class="deep-level-0"> 
    <td class="name"><code>height</code></td> 
    <td class="type"> <span class="param-type">number</span> </td> 
    <td class="description last">In pixels.</td> 
   </tr> 
   <tr class="deep-level-0"> 
    <td class="name"><code>lineWidth</code></td> 
    <td class="type"> <span class="param-type">number</span> </td> 
    <td class="description last">In pixels.</td> 
   </tr> 
  </tbody> 
 </table> 
</div> 
<dl class="details"> 
 <p class="tag-source"> <a href="rpg-api.js.html" class="button">View Source</a> <span> <a href="rpg-api.js.html">rpg-api.js</a>, <a href="rpg-api.js.html#line556">line 556</a> </span> </p> 
</dl> 
<h3>Example</h3> 
<pre class="prettyprint"><code>rpg.drawRect("my-canvas", 0, 0, 100, 100, 1);rpg.render("my-canvas");</code></pre>]]></desc>
        </keyword>
        <keyword name="rpg.drawRoundedRect(canvasId, x, y, width, height, lineWidth, radius);" type="function" returnType="undefined" definedIn="rpg-api.js:line 581">
            <desc><![CDATA[<h4 class="name" id="drawRoundedRect"> <a class="href-link" href="#drawRoundedRect">#</a> <span class="code-name"> drawRoundedRect<span class="signature">(canvasId, x, y, width, height, lineWidth, radius)</span><span class="type-signature"></span> </span> </h4> 
<div class="description">
  Draws a rectangle with rounded edges onto the canvas. 
</div> 
<h3>Parameters:</h3> 
<div class="table-container"> 
 <table class="params table"> 
  <thead> 
   <tr> 
    <th>Name</th> 
    <th>Type</th> 
    <th class="last">Description</th> 
   </tr> 
  </thead> 
  <tbody> 
   <tr class="deep-level-0"> 
    <td class="name"><code>canvasId</code></td> 
    <td class="type"> <span class="param-type">string</span> </td> 
    <td class="description last">ID of the canvas.</td> 
   </tr> 
   <tr class="deep-level-0"> 
    <td class="name"><code>x</code></td> 
    <td class="type"> <span class="param-type">number</span> </td> 
    <td class="description last">In pixels.</td> 
   </tr> 
   <tr class="deep-level-0"> 
    <td class="name"><code>y</code></td> 
    <td class="type"> <span class="param-type">number</span> </td> 
    <td class="description last">In pixels.</td> 
   </tr> 
   <tr class="deep-level-0"> 
    <td class="name"><code>width</code></td> 
    <td class="type"> <span class="param-type">number</span> </td> 
    <td class="description last">In pixels.</td> 
   </tr> 
   <tr class="deep-level-0"> 
    <td class="name"><code>height</code></td> 
    <td class="type"> <span class="param-type">number</span> </td> 
    <td class="description last">In pixels.</td> 
   </tr> 
   <tr class="deep-level-0"> 
    <td class="name"><code>lineWidth</code></td> 
    <td class="type"> <span class="param-type">number</span> </td> 
    <td class="description last">In pixels</td> 
   </tr> 
   <tr class="deep-level-0"> 
    <td class="name"><code>radius</code></td> 
    <td class="type"> <span class="param-type">number</span> </td> 
    <td class="description last">In radians.</td> 
   </tr> 
  </tbody> 
 </table> 
</div> 
<dl class="details"> 
 <p class="tag-source"> <a href="rpg-api.js.html" class="button">View Source</a> <span> <a href="rpg-api.js.html">rpg-api.js</a>, <a href="rpg-api.js.html#line581">line 581</a> </span> </p> 
</dl> 
<h3>Example</h3> 
<pre class="prettyprint"><code>rpg.drawRoundedRect("my-canvas", 0, 0, 100, 100, 1, 5);rpg.render("my-canvas");</code></pre>]]></desc>
        </keyword>
        <keyword name="rpg.drawText(canvasId, x, y, text);" type="function" returnType="undefined" definedIn="rpg-api.js:line 603">
            <desc><![CDATA[<h4 class="name" id="drawText"> <a class="href-link" href="#drawText">#</a> <span class="code-name"> drawText<span class="signature">(canvasId, x, y, text)</span><span class="type-signature"></span> </span> </h4> 
<div class="description">
  Draws the text on the canvas starting at the specified (x, y) position. 
</div> 
<h3>Parameters:</h3> 
<div class="table-container"> 
 <table class="params table"> 
  <thead> 
   <tr> 
    <th>Name</th> 
    <th>Type</th> 
    <th class="last">Description</th> 
   </tr> 
  </thead> 
  <tbody> 
   <tr class="deep-level-0"> 
    <td class="name"><code>canvasId</code></td> 
    <td class="type"> <span class="param-type">string</span> </td> 
    <td class="description last">ID of the canvas.</td> 
   </tr> 
   <tr class="deep-level-0"> 
    <td class="name"><code>x</code></td> 
    <td class="type"> <span class="param-type">number</span> </td> 
    <td class="description last">In pixels.</td> 
   </tr> 
   <tr class="deep-level-0"> 
    <td class="name"><code>y</code></td> 
    <td class="type"> <span class="param-type">number</span> </td> 
    <td class="description last">In pixels.</td> 
   </tr> 
   <tr class="deep-level-0"> 
    <td class="name"><code>text</code></td> 
    <td class="type"> <span class="param-type">string</span> </td> 
    <td class="description last">The text.</td> 
   </tr> 
  </tbody> 
 </table> 
</div> 
<dl class="details"> 
 <p class="tag-source"> <a href="rpg-api.js.html" class="button">View Source</a> <span> <a href="rpg-api.js.html">rpg-api.js</a>, <a href="rpg-api.js.html#line603">line 603</a> </span> </p> 
</dl> 
<h3>Example</h3> 
<pre class="prettyprint"><code>rpg.drawText("my-canvas", 100, 100, "Hello world!");rpg.render("my-canvas");</code></pre>]]></desc>
        </keyword>
        <keyword name="rpg.fillCircle(canvasId, x, y, radius);" type="function" returnType="undefined" definedIn="rpg-api.js:line 625">
            <desc><![CDATA[<h4 class="name" id="fillCircle"> <a class="href-link" href="#fillCircle">#</a> <span class="code-name"> fillCircle<span class="signature">(canvasId, x, y, radius)</span><span class="type-signature"></span> </span> </h4> 
<div class="description">
  Fills a solid circle onto the canvas. 
</div> 
<h3>Parameters:</h3> 
<div class="table-container"> 
 <table class="params table"> 
  <thead> 
   <tr> 
    <th>Name</th> 
    <th>Type</th> 
    <th class="last">Description</th> 
   </tr> 
  </thead> 
  <tbody> 
   <tr class="deep-level-0"> 
    <td class="name"><code>canvasId</code></td> 
    <td class="type"> <span class="param-type">string</span> </td> 
    <td class="description last">ID of the canvas.</td> 
   </tr> 
   <tr class="deep-level-0"> 
    <td class="name"><code>x</code></td> 
    <td class="type"> <span class="param-type">number</span> </td> 
    <td class="description last">In pixels.</td> 
   </tr> 
   <tr class="deep-level-0"> 
    <td class="name"><code>y</code></td> 
    <td class="type"> <span class="param-type">number</span> </td> 
    <td class="description last">In pixels.</td> 
   </tr> 
   <tr class="deep-level-0"> 
    <td class="name"><code>radius</code></td> 
    <td class="type"> <span class="param-type">number</span> </td> 
    <td class="description last">In pixels.</td> 
   </tr> 
  </tbody> 
 </table> 
</div> 
<dl class="details"> 
 <p class="tag-source"> <a href="rpg-api.js.html" class="button">View Source</a> <span> <a href="rpg-api.js.html">rpg-api.js</a>, <a href="rpg-api.js.html#line625">line 625</a> </span> </p> 
</dl> 
<h3>Example</h3> 
<pre class="prettyprint"><code>rpg.fillCirlce("my-canvas", 100, 100, 25);rpg.render("my-canvas");</code></pre>]]></desc>
        </keyword>
        <keyword name="rpg.fillRect(canvasId, x, y, width, height);" type="function" returnType="undefined" definedIn="rpg-api.js:line 648">
            <desc><![CDATA[<h4 class="name" id="fillRect"> <a class="href-link" href="#fillRect">#</a> <span class="code-name"> fillRect<span class="signature">(canvasId, x, y, width, height)</span><span class="type-signature"></span> </span> </h4> 
<div class="description">
  Fills a solid rectangle onto the canvas. 
</div> 
<h3>Parameters:</h3> 
<div class="table-container"> 
 <table class="params table"> 
  <thead> 
   <tr> 
    <th>Name</th> 
    <th>Type</th> 
    <th class="last">Description</th> 
   </tr> 
  </thead> 
  <tbody> 
   <tr class="deep-level-0"> 
    <td class="name"><code>canvasId</code></td> 
    <td class="type"> <span class="param-type">string</span> </td> 
    <td class="description last">ID of the canvas.</td> 
   </tr> 
   <tr class="deep-level-0"> 
    <td class="name"><code>x</code></td> 
    <td class="type"> <span class="param-type">number</span> </td> 
    <td class="description last">In pixels.</td> 
   </tr> 
   <tr class="deep-level-0"> 
    <td class="name"><code>y</code></td> 
    <td class="type"> <span class="param-type">number</span> </td> 
    <td class="description last">In pixels.</td> 
   </tr> 
   <tr class="deep-level-0"> 
    <td class="name"><code>width</code></td> 
    <td class="type"> <span class="param-type">number</span> </td> 
    <td class="description last">In pixels.</td> 
   </tr> 
   <tr class="deep-level-0"> 
    <td class="name"><code>height</code></td> 
    <td class="type"> <span class="param-type">number</span> </td> 
    <td class="description last">In pixels.</td> 
   </tr> 
  </tbody> 
 </table> 
</div> 
<dl class="details"> 
 <p class="tag-source"> <a href="rpg-api.js.html" class="button">View Source</a> <span> <a href="rpg-api.js.html">rpg-api.js</a>, <a href="rpg-api.js.html#line648">line 648</a> </span> </p> 
</dl> 
<h3>Example</h3> 
<pre class="prettyprint"><code>rpg.fillRect("my-canvas", 50, 50, 100, 100);rpg.render("my-canvas");</code></pre>]]></desc>
        </keyword>
        <keyword name="rpg.fillRoundedRect(canvasId, x, y, width, height, radius);" type="function" returnType="undefined" definedIn="rpg-api.js:line 671">
            <desc><![CDATA[<h4 class="name" id="fillRoundedRect"> <a class="href-link" href="#fillRoundedRect">#</a> <span class="code-name"> fillRoundedRect<span class="signature">(canvasId, x, y, width, height, radius)</span><span class="type-signature"></span> </span> </h4> 
<div class="description">
  Fills a solid rounded rectangle on the canvas. 
</div> 
<h3>Parameters:</h3> 
<div class="table-container"> 
 <table class="params table"> 
  <thead> 
   <tr> 
    <th>Name</th> 
    <th>Type</th> 
    <th class="last">Description</th> 
   </tr> 
  </thead> 
  <tbody> 
   <tr class="deep-level-0"> 
    <td class="name"><code>canvasId</code></td> 
    <td class="type"> <span class="param-type">string</span> </td> 
    <td class="description last">ID of the canvas.</td> 
   </tr> 
   <tr class="deep-level-0"> 
    <td class="name"><code>x</code></td> 
    <td class="type"> <span class="param-type">number</span> </td> 
    <td class="description last">In pixels.</td> 
   </tr> 
   <tr class="deep-level-0"> 
    <td class="name"><code>y</code></td> 
    <td class="type"> <span class="param-type">number</span> </td> 
    <td class="description last">In pixels.</td> 
   </tr> 
   <tr class="deep-level-0"> 
    <td class="name"><code>width</code></td> 
    <td class="type"> <span class="param-type">number</span> </td> 
    <td class="description last">In pixels.</td> 
   </tr> 
   <tr class="deep-level-0"> 
    <td class="name"><code>height</code></td> 
    <td class="type"> <span class="param-type">number</span> </td> 
    <td class="description last">In pixels.</td> 
   </tr> 
   <tr class="deep-level-0"> 
    <td class="name"><code>radius</code></td> 
    <td class="type"> <span class="param-type">number</span> </td> 
    <td class="description last">In pixels.</td> 
   </tr> 
  </tbody> 
 </table> 
</div> 
<dl class="details"> 
 <p class="tag-source"> <a href="rpg-api.js.html" class="button">View Source</a> <span> <a href="rpg-api.js.html">rpg-api.js</a>, <a href="rpg-api.js.html#line671">line 671</a> </span> </p> 
</dl> 
<h3>Example</h3> 
<pre class="prettyprint"><code>rpg.fillRoundedRect("my-canvas", 50, 50, 100, 100, 5);</code></pre>]]></desc>
        </keyword>
        <keyword name="rpg.getPixel(canvasId, x, y);" type="function" returnType="{Draw2D.ImageData}" definedIn="rpg-api.js:line 361">
            <desc><![CDATA[<h4 class="name" id="getPixel"> <a class="href-link" href="#getPixel">#</a> <span class="code-name"> getPixel<span class="signature">(canvasId, x, y)</span><span class="type-signature"> → {Draw2D.ImageData}</span> </span> </h4> 
<div class="description">
  Gets the pixel ImageData at the (x, y) coordinate on the canvas. 
</div> 
<h3>Parameters:</h3> 
<div class="table-container"> 
 <table class="params table"> 
  <thead> 
   <tr> 
    <th>Name</th> 
    <th>Type</th> 
    <th class="last">Description</th> 
   </tr> 
  </thead> 
  <tbody> 
   <tr class="deep-level-0"> 
    <td class="name"><code>canvasId</code></td> 
    <td class="type"> <span class="param-type">string</span> </td> 
    <td class="description last">ID of the canvas.</td> 
   </tr> 
   <tr class="deep-level-0"> 
    <td class="name"><code>x</code></td> 
    <td class="type"> <span class="param-type">number</span> </td> 
    <td class="description last">In pixels.</td> 
   </tr> 
   <tr class="deep-level-0"> 
    <td class="name"><code>y</code></td> 
    <td class="type"> <span class="param-type">number</span> </td> 
    <td class="description last">In pixels.</td> 
   </tr> 
  </tbody> 
 </table> 
</div> 
<dl class="details"> 
 <p class="tag-source"> <a href="rpg-api.js.html" class="button">View Source</a> <span> <a href="rpg-api.js.html">rpg-api.js</a>, <a href="rpg-api.js.html#line361">line 361</a> </span> </p> 
</dl> 
<div class="columns method-parameter"> 
 <div class="column is-2">
  <label>Returns:</label>
 </div> 
 <div class="column is-10"> 
  <div class="columns"> 
   <div class="param-desc column is-7">
    An ImageData object.
   </div> 
   <div class="column is-5 has-text-left"> 
    <label>Type: </label> 
    <span class="param-type">Draw2D.ImageData</span> 
   </div> 
  </div> 
 </div> 
</div> 
<h3>Example</h3> 
<pre class="prettyprint"><code>// Draw a rectangle on the canvas and render itrpg.createCanvas("my-canvas", 640, 480);rpg.fillRect("my-canvas", 0, 0, 100, 100);rpg.render("my-canvas");// Get the red pixel at (50, 50) from the rectangleconst imageData = rpg.getPixel("my-canvas", 50, 50);const rgba = imageData.data;// Show the RGBA values of the pixelalert("R, G, B, A (" + rgba[0] + ", " + rgba[1] + ", " + rgba[2] + ", " + rgba[3] + ")");</code></pre>]]></desc>
        </keyword>
        <keyword name="rpg.setColor(r, g, b, a);" type="function" returnType="undefined" definedIn="rpg-api.js:line 308">
            <desc><![CDATA[<h4 class="name" id="setColor"> <a class="href-link" href="#setColor">#</a> <span class="code-name"> setColor<span class="signature">(r, g, b, a)</span><span class="type-signature"></span> </span> </h4> 
<div class="description">
  Sets the current color to use for all drawing operations. 
</div> 
<h3>Parameters:</h3> 
<div class="table-container"> 
 <table class="params table"> 
  <thead> 
   <tr> 
    <th>Name</th> 
    <th>Type</th> 
    <th class="last">Description</th> 
   </tr> 
  </thead> 
  <tbody> 
   <tr class="deep-level-0"> 
    <td class="name"><code>r</code></td> 
    <td class="type"> <span class="param-type">number</span> </td> 
    <td class="description last"></td> 
   </tr> 
   <tr class="deep-level-0"> 
    <td class="name"><code>g</code></td> 
    <td class="type"> <span class="param-type">number</span> </td> 
    <td class="description last"></td> 
   </tr> 
   <tr class="deep-level-0"> 
    <td class="name"><code>b</code></td> 
    <td class="type"> <span class="param-type">number</span> </td> 
    <td class="description last"></td> 
   </tr> 
   <tr class="deep-level-0"> 
    <td class="name"><code>a</code></td> 
    <td class="type"> <span class="param-type">number</span> </td> 
    <td class="description last"></td> 
   </tr> 
  </tbody> 
 </table> 
</div> 
<dl class="details"> 
 <p class="tag-source"> <a href="rpg-api.js.html" class="button">View Source</a> <span> <a href="rpg-api.js.html">rpg-api.js</a>, <a href="rpg-api.js.html#line308">line 308</a> </span> </p> 
</dl> 
<h3>Example</h3> 
<pre class="prettyprint"><code>rpg.setColor(255, 0, 0, 1.0); // Solid red</code></pre>]]></desc>
        </keyword>
        <keyword name="rpg.setColor(alpha);" type="function" returnType="undefined" definedIn="rpg-api.js:line 321">
            <desc><![CDATA[<h4 class="name" id="setColor"> <a class="href-link" href="#setColor">#</a> <span class="code-name"> setColor<span class="signature">(alpha)</span><span class="type-signature"></span> </span> </h4> 
<div class="description">
  Sets the global alpha for all drawing operations. 
</div> 
<h3>Parameters:</h3> 
<div class="table-container"> 
 <table class="params table"> 
  <thead> 
   <tr> 
    <th>Name</th> 
    <th>Type</th> 
    <th class="last">Description</th> 
   </tr> 
  </thead> 
  <tbody> 
   <tr class="deep-level-0"> 
    <td class="name"><code>alpha</code></td> 
    <td class="type"> <span class="param-type">number</span> </td> 
    <td class="description last"></td> 
   </tr> 
  </tbody> 
 </table> 
</div> 
<dl class="details"> 
 <p class="tag-source"> <a href="rpg-api.js.html" class="button">View Source</a> <span> <a href="rpg-api.js.html">rpg-api.js</a>, <a href="rpg-api.js.html#line321">line 321</a> </span> </p> 
</dl> 
<h3>Example</h3> 
<pre class="prettyprint"><code>rpg.setAlpha(0.5);</code></pre>]]></desc>
        </keyword>
        <keyword name="rpg.setFont(size, family);" type="function" returnType="undefined" definedIn="rpg-api.js:line 335">
            <desc><![CDATA[<h4 class="name" id="setFont"> <a class="href-link" href="#setFont">#</a> <span class="code-name"> setFont<span class="signature">(size, family)</span><span class="type-signature"></span> </span> </h4> 
<div class="description">
  Sets the global font for all drawing operations. 
</div> 
<h3>Parameters:</h3> 
<div class="table-container"> 
 <table class="params table"> 
  <thead> 
   <tr> 
    <th>Name</th> 
    <th>Type</th> 
    <th class="last">Description</th> 
   </tr> 
  </thead> 
  <tbody> 
   <tr class="deep-level-0"> 
    <td class="name"><code>size</code></td> 
    <td class="type"> <span class="param-type">number</span> </td> 
    <td class="description last">In pixels.</td> 
   </tr> 
   <tr class="deep-level-0"> 
    <td class="name"><code>family</code></td> 
    <td class="type"> <span class="param-type">string</span> </td> 
    <td class="description last">E.g. Arial, Comic Sans, etc.</td> 
   </tr> 
  </tbody> 
 </table> 
</div> 
<dl class="details"> 
 <p class="tag-source"> <a href="rpg-api.js.html" class="button">View Source</a> <span> <a href="rpg-api.js.html">rpg-api.js</a>, <a href="rpg-api.js.html#line335">line 335</a> </span> </p> 
</dl> 
<h3>Example</h3> 
<pre class="prettyprint"><code>rpg.setFont(8, "Lucida Console");</code></pre>]]></desc>
        </keyword>
        <keyword name="rpg.setPixel(canvasId, x, y);" type="function" returnType="undefined" definedIn="rpg-api.js:line 387">
            <desc><![CDATA[<h4 class="name" id="setPixel"> <a class="href-link" href="#setPixel">#</a> <span class="code-name"> setPixel<span class="signature">(canvasId, x, y)</span><span class="type-signature"></span> </span> </h4> 
<div class="description">
  Sets the pixel ImageData at the (x, y) coordinate on the canvas. 
</div> 
<h3>Parameters:</h3> 
<div class="table-container"> 
 <table class="params table"> 
  <thead> 
   <tr> 
    <th>Name</th> 
    <th>Type</th> 
    <th class="last">Description</th> 
   </tr> 
  </thead> 
  <tbody> 
   <tr class="deep-level-0"> 
    <td class="name"><code>canvasId</code></td> 
    <td class="type"> <span class="param-type">string</span> </td> 
    <td class="description last">ID of the canvas.</td> 
   </tr> 
   <tr class="deep-level-0"> 
    <td class="name"><code>x</code></td> 
    <td class="type"> <span class="param-type">number</span> </td> 
    <td class="description last">In pixels.</td> 
   </tr> 
   <tr class="deep-level-0"> 
    <td class="name"><code>y</code></td> 
    <td class="type"> <span class="param-type">number</span> </td> 
    <td class="description last">In pixels.</td> 
   </tr> 
  </tbody> 
 </table> 
</div> 
<dl class="details"> 
 <p class="tag-source"> <a href="rpg-api.js.html" class="button">View Source</a> <span> <a href="rpg-api.js.html">rpg-api.js</a>, <a href="rpg-api.js.html#line387">line 387</a> </span> </p> 
</dl> 
<h3>Example</h3> 
<pre class="prettyprint"><code>// Draw a rectangle on the canvas and render itrpg.createCanvas("my-canvas", 640, 480);rpg.fillRect("my-canvas", 0, 0, 100, 100);rpg.render("my-canvas");// Set a pixel to green at (50, 50) from the rectanglerpg.setColor(0, 255, 0, 1.0);rpg.setPixel("my-canvas", 50, 50);</code></pre>]]></desc>
        </keyword>
        <keyword name="rpg.getAngleBetweenPoints(x1, y1, x2, y2);" type="function" returnType="{number}" definedIn="rpg-api.js:line 1070">
            <desc><![CDATA[<h4 class="name" id="getAngleBetweenPoints"> <a class="href-link" href="#getAngleBetweenPoints">#</a> <span class="code-name"> getAngleBetweenPoints<span class="signature">(x1, y1, x2, y2)</span><span class="type-signature"> → {number}</span> </span> </h4> 
<div class="description">
  Gets the angle between two points in radians. 
</div> 
<h3>Parameters:</h3> 
<div class="table-container"> 
 <table class="params table"> 
  <thead> 
   <tr> 
    <th>Name</th> 
    <th>Type</th> 
    <th class="last">Description</th> 
   </tr> 
  </thead> 
  <tbody> 
   <tr class="deep-level-0"> 
    <td class="name"><code>x1</code></td> 
    <td class="type"> <span class="param-type">number</span> </td> 
    <td class="description last"></td> 
   </tr> 
   <tr class="deep-level-0"> 
    <td class="name"><code>y1</code></td> 
    <td class="type"> <span class="param-type">number</span> </td> 
    <td class="description last"></td> 
   </tr> 
   <tr class="deep-level-0"> 
    <td class="name"><code>x2</code></td> 
    <td class="type"> <span class="param-type">number</span> </td> 
    <td class="description last"></td> 
   </tr> 
   <tr class="deep-level-0"> 
    <td class="name"><code>y2</code></td> 
    <td class="type"> <span class="param-type">number</span> </td> 
    <td class="description last"></td> 
   </tr> 
  </tbody> 
 </table> 
</div> 
<dl class="details"> 
 <p class="tag-source"> <a href="rpg-api.js.html" class="button">View Source</a> <span> <a href="rpg-api.js.html">rpg-api.js</a>, <a href="rpg-api.js.html#line1070">line 1070</a> </span> </p> 
</dl> 
<div class="columns method-parameter"> 
 <div class="column is-2">
  <label>Returns:</label>
 </div> 
 <div class="column is-10"> 
  <div class="columns"> 
   <div class="param-desc column is-7">
    The angle between the points in radians.
   </div> 
   <div class="column is-5 has-text-left"> 
    <label>Type: </label> 
    <span class="param-type">number</span> 
   </div> 
  </div> 
 </div> 
</div> 
<h3>Example</h3> 
<pre class="prettyprint"><code>// Get the angle in radians between two points.const angle = rpg.getAngleBetweenPoints(location.x, location.y, this.x, this.y);</code></pre>]]></desc>
        </keyword>
        <keyword name="rpg.getDistanceBetweenPoints(x1, y1, x2, y2);" type="function" returnType="{number}" definedIn="rpg-api.js:line 1088">
            <desc><![CDATA[<h4 class="name" id="getDistanceBetweenPoints"> <a class="href-link" href="#getDistanceBetweenPoints">#</a> <span class="code-name"> getDistanceBetweenPoints<span class="signature">(x1, y1, x2, y2)</span><span class="type-signature"> → {number}</span> </span> </h4> 
<div class="description">
  Gets the straight line distance between two points in pixels. 
</div> 
<h3>Parameters:</h3> 
<div class="table-container"> 
 <table class="params table"> 
  <thead> 
   <tr> 
    <th>Name</th> 
    <th>Type</th> 
    <th class="last">Description</th> 
   </tr> 
  </thead> 
  <tbody> 
   <tr class="deep-level-0"> 
    <td class="name"><code>x1</code></td> 
    <td class="type"> <span class="param-type">number</span> </td> 
    <td class="description last"></td> 
   </tr> 
   <tr class="deep-level-0"> 
    <td class="name"><code>y1</code></td> 
    <td class="type"> <span class="param-type">number</span> </td> 
    <td class="description last"></td> 
   </tr> 
   <tr class="deep-level-0"> 
    <td class="name"><code>x2</code></td> 
    <td class="type"> <span class="param-type">number</span> </td> 
    <td class="description last"></td> 
   </tr> 
   <tr class="deep-level-0"> 
    <td class="name"><code>y2</code></td> 
    <td class="type"> <span class="param-type">number</span> </td> 
    <td class="description last"></td> 
   </tr> 
  </tbody> 
 </table> 
</div> 
<dl class="details"> 
 <p class="tag-source"> <a href="rpg-api.js.html" class="button">View Source</a> <span> <a href="rpg-api.js.html">rpg-api.js</a>, <a href="rpg-api.js.html#line1088">line 1088</a> </span> </p> 
</dl> 
<div class="columns method-parameter"> 
 <div class="column is-2">
  <label>Returns:</label>
 </div> 
 <div class="column is-10"> 
  <div class="columns"> 
   <div class="param-desc column is-7">
    The distance in pixels.
   </div> 
   <div class="column is-5 has-text-left"> 
    <label>Type: </label> 
    <span class="param-type">number</span> 
   </div> 
  </div> 
 </div> 
</div> 
<h3>Example</h3> 
<pre class="prettyprint"><code>// Get the distance between two points in pixels.const distance = rpg.getDistanceBetweenPoints(location.x, location.y, this.x, this.y);</code></pre>]]></desc>
        </keyword>
        <keyword name="rpg.raycast(origin, direction, maxDistance);" type="function" returnType="undefined" definedIn="rpg-api.js:line 1052">
            <desc><![CDATA[<h4 class="name" id="raycast"> <a class="href-link" href="#raycast">#</a> <span class="code-name"> raycast<span class="signature">(origin, direction, maxDistance)</span><span class="type-signature"></span> </span> </h4> 
<div class="description">
  TODO 
</div> 
<h3>Parameters:</h3> 
<div class="table-container"> 
 <table class="params table"> 
  <thead> 
   <tr> 
    <th>Name</th> 
    <th>Type</th> 
    <th class="last">Description</th> 
   </tr> 
  </thead> 
  <tbody> 
   <tr class="deep-level-0"> 
    <td class="name"><code>origin</code></td> 
    <td class="type"> <span class="param-type">Object</span> </td> 
    <td class="description last">TODO</td> 
   </tr> 
   <tr class="deep-level-0"> 
    <td class="name"><code>direction</code></td> 
    <td class="type"> <span class="param-type">Object</span> </td> 
    <td class="description last">TODO</td> 
   </tr> 
   <tr class="deep-level-0"> 
    <td class="name"><code>maxDistance</code></td> 
    <td class="type"> <span class="param-type">Object</span> </td> 
    <td class="description last">TODO</td> 
   </tr> 
  </tbody> 
 </table> 
</div> 
<dl class="details"> 
 <p class="tag-source"> <a href="rpg-api.js.html" class="button">View Source</a> <span> <a href="rpg-api.js.html">rpg-api.js</a>, <a href="rpg-api.js.html#line1052">line 1052</a> </span> </p> 
</dl> 
<h3>Example</h3> 
<pre class="prettyprint"><code>// TODO</code></pre>]]></desc>
        </keyword>
        <keyword name="rpg.getGlobal(id);" type="function" returnType="{Object}" definedIn="rpg-api.js:line 1106">
            <desc><![CDATA[<h4 class="name" id="getGlobal"> <a class="href-link" href="#getGlobal">#</a> <span class="code-name"> getGlobal<span class="signature">(id)</span><span class="type-signature"> → {Object}</span> </span> </h4> 
<div class="description">
  Gets the value of a global variable. 
</div> 
<h3>Parameters:</h3> 
<div class="table-container"> 
 <table class="params table"> 
  <thead> 
   <tr> 
    <th>Name</th> 
    <th>Type</th> 
    <th class="last">Description</th> 
   </tr> 
  </thead> 
  <tbody> 
   <tr class="deep-level-0"> 
    <td class="name"><code>id</code></td> 
    <td class="type"> <span class="param-type">string</span> </td> 
    <td class="description last">ID of the global variable.</td> 
   </tr> 
  </tbody> 
 </table> 
</div> 
<dl class="details"> 
 <p class="tag-source"> <a href="rpg-api.js.html" class="button">View Source</a> <span> <a href="rpg-api.js.html">rpg-api.js</a>, <a href="rpg-api.js.html#line1106">line 1106</a> </span> </p> 
</dl> 
<div class="columns method-parameter"> 
 <div class="column is-2">
  <label>Returns:</label>
 </div> 
 <div class="column is-10"> 
  <div class="columns"> 
   <div class="param-desc column is-7">
    Value of the global variable.
   </div> 
   <div class="column is-5 has-text-left"> 
    <label>Type: </label> 
    <span class="param-type">Object</span> 
   </div> 
  </div> 
 </div> 
</div> 
<h3>Example</h3> 
<pre class="prettyprint"><code>const swordActive = rpgcode.getGlobal("swordActive");console.log(swordActive);</code></pre>]]></desc>
        </keyword>
        <keyword name="rpg.removeGlobal(id);" type="function" returnType="undefined" definedIn="rpg-api.js:line 1140">
            <desc><![CDATA[<h4 class="name" id="removeGlobal"> <a class="href-link" href="#removeGlobal">#</a> <span class="code-name"> removeGlobal<span class="signature">(id)</span><span class="type-signature"></span> </span> </h4> 
<div class="description">
  Removes a global variable from the engine. 
</div> 
<h3>Parameters:</h3> 
<div class="table-container"> 
 <table class="params table"> 
  <thead> 
   <tr> 
    <th>Name</th> 
    <th>Type</th> 
    <th class="last">Description</th> 
   </tr> 
  </thead> 
  <tbody> 
   <tr class="deep-level-0"> 
    <td class="name"><code>id</code></td> 
    <td class="type"> <span class="param-type">string</span> </td> 
    <td class="description last">ID of the global variable.</td> 
   </tr> 
  </tbody> 
 </table> 
</div> 
<dl class="details"> 
 <p class="tag-source"> <a href="rpg-api.js.html" class="button">View Source</a> <span> <a href="rpg-api.js.html">rpg-api.js</a>, <a href="rpg-api.js.html#line1140">line 1140</a> </span> </p> 
</dl> 
<h3>Example</h3> 
<pre class="prettyprint"><code>rpg.removeGlobal("swordActive");</code></pre>]]></desc>
        </keyword>
        <keyword name="rpg.setGlobal(id, value);" type="function" returnType="undefined" definedIn="rpg-api.js:line 1127">
            <desc><![CDATA[<h4 class="name" id="setGlobal"> <a class="href-link" href="#setGlobal">#</a> <span class="code-name"> setGlobal<span class="signature">(id, value)</span><span class="type-signature"></span> </span> </h4> 
<div class="description">
  Sets a global value in the engine, if it doesn't exist it is created. 
</div> 
<h3>Parameters:</h3> 
<div class="table-container"> 
 <table class="params table"> 
  <thead> 
   <tr> 
    <th>Name</th> 
    <th>Type</th> 
    <th class="last">Description</th> 
   </tr> 
  </thead> 
  <tbody> 
   <tr class="deep-level-0"> 
    <td class="name"><code>id</code></td> 
    <td class="type"> <span class="param-type">string</span> </td> 
    <td class="description last">ID of the global variable.</td> 
   </tr> 
   <tr class="deep-level-0"> 
    <td class="name"><code>value</code></td> 
    <td class="type"> <span class="param-type">Object</span> </td> 
    <td class="description last">Value of the global variable.</td> 
   </tr> 
  </tbody> 
 </table> 
</div> 
<dl class="details"> 
 <p class="tag-source"> <a href="rpg-api.js.html" class="button">View Source</a> <span> <a href="rpg-api.js.html">rpg-api.js</a>, <a href="rpg-api.js.html#line1127">line 1127</a> </span> </p> 
</dl> 
<h3>Example</h3> 
<pre class="prettyprint"><code>// Store a simple boolean.rpg.setGlobal("swordactive", false);// Store a string.rpg.setGlobal("name", "Bob");// Store an object.rpg.setGlobal("shield", {def: 10, price: 100});</code></pre>]]></desc>
        </keyword>
        <keyword name="rpg.registerKeyDown(key, callback, globalopt);" type="function" returnType="undefined" definedIn="rpg-api.js:line 1164">
            <desc><![CDATA[<h4 class="name" id="registerKeyDown"> <a class="href-link" href="#registerKeyDown">#</a> <span class="code-name"> registerKeyDown<span class="signature">(key, callback, global<span class="signature-attributes">opt</span>)</span><span class="type-signature"></span> </span> </h4> 
<div class="description">
  Registers a KeyDown listener for a specific key, for a list of valid key values see: http://craftyjs.com/api/Crafty-keys.html The callback function will continue to be invoked for every KeyDown event until it is unregistered. 
</div> 
<h3>Parameters:</h3> 
<div class="table-container"> 
 <table class="params table"> 
  <thead> 
   <tr> 
    <th>Name</th> 
    <th>Type</th> 
    <th>Attributes</th> 
    <th>Default</th> 
    <th class="last">Description</th> 
   </tr> 
  </thead> 
  <tbody> 
   <tr class="deep-level-0"> 
    <td class="name"><code>key</code></td> 
    <td class="type"> <span class="param-type">string</span> </td> 
    <td class="attributes"> </td> 
    <td class="default"> </td> 
    <td class="description last">The key to listen to.</td> 
   </tr> 
   <tr class="deep-level-0"> 
    <td class="name"><code>callback</code></td> 
    <td class="type"> <span class="param-type">Callback</span> </td> 
    <td class="attributes"> </td> 
    <td class="default"> </td> 
    <td class="description last">The callback function to invoke when the keyDown event fires.</td> 
   </tr> 
   <tr class="deep-level-0"> 
    <td class="name"><code>global</code></td> 
    <td class="type"> <span class="param-type">boolean</span> </td> 
    <td class="attributes"> &lt;optional&gt;<br> </td> 
    <td class="default"> false </td> 
    <td class="description last">Whether this should be globally applied in the engine.</td> 
   </tr> 
  </tbody> 
 </table> 
</div> 
<dl class="details"> 
 <p class="tag-source"> <a href="rpg-api.js.html" class="button">View Source</a> <span> <a href="rpg-api.js.html">rpg-api.js</a>, <a href="rpg-api.js.html#line1164">line 1164</a> </span> </p> 
</dl> 
<h3>Example</h3> 
<pre class="prettyprint"><code>rpg.registerKeyDown("ENTER", async function(e) { console.log(e.key + " key is down!");});</code></pre>]]></desc>
        </keyword>
        <keyword name="rpg.registerKeyUp(key, callback, globalopt);" type="function" returnType="undefined" definedIn="rpg-api.js:line 1209">
            <desc><![CDATA[<h4 class="name" id="registerKeyUp"> <a class="href-link" href="#registerKeyUp">#</a> <span class="code-name"> registerKeyUp<span class="signature">(key, callback, global<span class="signature-attributes">opt</span>)</span><span class="type-signature"></span> </span> </h4> 
<div class="description">
  Registers a KeyUp listener for a specific key, for a list of valid key values see: http://craftyjs.com/api/Crafty-keys.html The callback function will continue to be invoked for every KeyUp event until it is unregistered. 
</div> 
<h3>Parameters:</h3> 
<div class="table-container"> 
 <table class="params table"> 
  <thead> 
   <tr> 
    <th>Name</th> 
    <th>Type</th> 
    <th>Attributes</th> 
    <th>Default</th> 
    <th class="last">Description</th> 
   </tr> 
  </thead> 
  <tbody> 
   <tr class="deep-level-0"> 
    <td class="name"><code>key</code></td> 
    <td class="type"> <span class="param-type">string</span> </td> 
    <td class="attributes"> </td> 
    <td class="default"> </td> 
    <td class="description last">The key to listen to.</td> 
   </tr> 
   <tr class="deep-level-0"> 
    <td class="name"><code>callback</code></td> 
    <td class="type"> <span class="param-type">Callback</span> </td> 
    <td class="attributes"> </td> 
    <td class="default"> </td> 
    <td class="description last">The callback function to invoke when the keyDown event fires.</td> 
   </tr> 
   <tr class="deep-level-0"> 
    <td class="name"><code>global</code></td> 
    <td class="type"> <span class="param-type">boolean</span> </td> 
    <td class="attributes"> &lt;optional&gt;<br> </td> 
    <td class="default"> false </td> 
    <td class="description last">Whether this should be globally applied in the engine.</td> 
   </tr> 
  </tbody> 
 </table> 
</div> 
<dl class="details"> 
 <p class="tag-source"> <a href="rpg-api.js.html" class="button">View Source</a> <span> <a href="rpg-api.js.html">rpg-api.js</a>, <a href="rpg-api.js.html#line1209">line 1209</a> </span> </p> 
</dl> 
<h3>Example</h3> 
<pre class="prettyprint"><code>rpg.registerKeyUp("ENTER", async function(e) { console.log(e.key + " key is up!");});</code></pre>]]></desc>
        </keyword>
        <keyword name="rpg.unregisterKeyDown(key, globalopt);" type="function" returnType="undefined" definedIn="rpg-api.js:line 1183">
            <desc><![CDATA[<h4 class="name" id="unregisterKeyDown"> <a class="href-link" href="#unregisterKeyDown">#</a> <span class="code-name"> unregisterKeyDown<span class="signature">(key, global<span class="signature-attributes">opt</span>)</span><span class="type-signature"></span> </span> </h4> 
<div class="description">
  Removes a previously registered KeyDown listener. 
</div> 
<h3>Parameters:</h3> 
<div class="table-container"> 
 <table class="params table"> 
  <thead> 
   <tr> 
    <th>Name</th> 
    <th>Type</th> 
    <th>Attributes</th> 
    <th>Default</th> 
    <th class="last">Description</th> 
   </tr> 
  </thead> 
  <tbody> 
   <tr class="deep-level-0"> 
    <td class="name"><code>key</code></td> 
    <td class="type"> <span class="param-type">string</span> </td> 
    <td class="attributes"> </td> 
    <td class="default"> </td> 
    <td class="description last">The key to listen to.</td> 
   </tr> 
   <tr class="deep-level-0"> 
    <td class="name"><code>global</code></td> 
    <td class="type"> <span class="param-type">boolean</span> </td> 
    <td class="attributes"> &lt;optional&gt;<br> </td> 
    <td class="default"> false </td> 
    <td class="description last">Whether this should be globally applied in the engine.</td> 
   </tr> 
  </tbody> 
 </table> 
</div> 
<dl class="details"> 
 <p class="tag-source"> <a href="rpg-api.js.html" class="button">View Source</a> <span> <a href="rpg-api.js.html">rpg-api.js</a>, <a href="rpg-api.js.html#line1183">line 1183</a> </span> </p> 
</dl> 
<h3>Example</h3> 
<pre class="prettyprint"><code>rpg.unregisterKeyDown("ENTER");</code></pre>]]></desc>
        </keyword>
        <keyword name="rpg.unregisterKeyUp(key, globalopt);" type="function" returnType="undefined" definedIn="rpg-api.js:line 1228">
            <desc><![CDATA[<h4 class="name" id="unregisterKeyUp"> <a class="href-link" href="#unregisterKeyUp">#</a> <span class="code-name"> unregisterKeyUp<span class="signature">(key, global<span class="signature-attributes">opt</span>)</span><span class="type-signature"></span> </span> </h4> 
<div class="description">
  Removes a previously registered KeyUp listener. 
</div> 
<h3>Parameters:</h3> 
<div class="table-container"> 
 <table class="params table"> 
  <thead> 
   <tr> 
    <th>Name</th> 
    <th>Type</th> 
    <th>Attributes</th> 
    <th>Default</th> 
    <th class="last">Description</th> 
   </tr> 
  </thead> 
  <tbody> 
   <tr class="deep-level-0"> 
    <td class="name"><code>key</code></td> 
    <td class="type"> <span class="param-type">string</span> </td> 
    <td class="attributes"> </td> 
    <td class="default"> </td> 
    <td class="description last">The key to listen to.</td> 
   </tr> 
   <tr class="deep-level-0"> 
    <td class="name"><code>global</code></td> 
    <td class="type"> <span class="param-type">boolean</span> </td> 
    <td class="attributes"> &lt;optional&gt;<br> </td> 
    <td class="default"> false </td> 
    <td class="description last">Whether this should be globally applied in the engine.</td> 
   </tr> 
  </tbody> 
 </table> 
</div> 
<dl class="details"> 
 <p class="tag-source"> <a href="rpg-api.js.html" class="button">View Source</a> <span> <a href="rpg-api.js.html">rpg-api.js</a>, <a href="rpg-api.js.html#line1228">line 1228</a> </span> </p> 
</dl> 
<h3>Example</h3> 
<pre class="prettyprint"><code>rpg.unregisterKeyUp("ENTER");</code></pre>]]></desc>
        </keyword>
        <keyword name="rpg.addLayerImage(imageId, layer, image);" type="function" returnType="undefined" definedIn="rpg-api.js:line 734">
            <desc><![CDATA[<h4 class="name" id="addLayerImage"> <a class="href-link" href="#addLayerImage">#</a> <span class="tag">async</span> <span class="code-name"> addLayerImage<span class="signature">(imageId, layer, image)</span><span class="type-signature"></span> </span> </h4> 
<div class="description">
  Adds the layer image to the requested layer, it will be rendered immediately after being added to the map. 
</div> 
<h3>Parameters:</h3> 
<div class="table-container"> 
 <table class="params table"> 
  <thead> 
   <tr> 
    <th>Name</th> 
    <th>Type</th> 
    <th class="last">Description</th> 
   </tr> 
  </thead> 
  <tbody> 
   <tr class="deep-level-0"> 
    <td class="name"><code>imageId</code></td> 
    <td class="type"> <span class="param-type">string</span> </td> 
    <td class="description last">ID of the layer image.</td> 
   </tr> 
   <tr class="deep-level-0"> 
    <td class="name"><code>layer</code></td> 
    <td class="type"> <span class="param-type">string</span> </td> 
    <td class="description last">Layer index on the map, the first layer starts at 0.</td> 
   </tr> 
   <tr class="deep-level-0"> 
    <td class="name"><code>image</code></td> 
    <td class="type"> <span class="param-type">string</span> </td> 
    <td class="description last">The name of the image.</td> 
   </tr> 
  </tbody> 
 </table> 
</div> 
<dl class="details"> 
 <p class="tag-source"> <a href="rpg-api.js.html" class="button">View Source</a> <span> <a href="rpg-api.js.html">rpg-api.js</a>, <a href="rpg-api.js.html#line734">line 734</a> </span> </p> 
</dl> 
<h3>Example</h3> 
<pre class="prettyprint"><code>// TODO</code></pre>]]></desc>
        </keyword>
        <keyword name="rpg.getMap();" type="function" returnType="{Asset.MapAsset}" definedIn="rpg-api.js:line 705">
            <desc><![CDATA[<h4 class="name" id="getMap"> <a class="href-link" href="#getMap">#</a> <span class="code-name"> getMap<span class="signature">()</span><span class="type-signature"> → {Asset.MapAsset}</span> </span> </h4> 
<div class="description">
  Gets the currently loaded Map asset. 
</div> 
<dl class="details"> 
 <p class="tag-source"> <a href="rpg-api.js.html" class="button">View Source</a> <span> <a href="rpg-api.js.html">rpg-api.js</a>, <a href="rpg-api.js.html#line705">line 705</a> </span> </p> 
</dl> 
<div class="columns method-parameter"> 
 <div class="column is-2">
  <label>Returns:</label>
 </div> 
 <div class="column is-10"> 
  <div class="columns"> 
   <div class="column is-5 has-text-left"> 
    <label>Type: </label> 
    <span class="param-type">Asset.MapAsset</span> 
   </div> 
  </div> 
 </div> 
</div> 
<h3>Example</h3> 
<pre class="prettyprint"><code>const currMap = rpg.getMap();console.log(currMap);</code></pre>]]></desc>
        </keyword>
        <keyword name="rpg.getTileData(x, y, layer);" type="function" returnType="{Map.TileData}" definedIn="rpg-api.js:line 774">
            <desc><![CDATA[<h4 class="name" id="getTileData"> <a class="href-link" href="#getTileData">#</a> <span class="code-name"> getTileData<span class="signature">(x, y, layer)</span><span class="type-signature"> → {Map.TileData}</span> </span> </h4> 
<div class="description">
  Gets the data associated with a tile on the map as set in the Editor's Tileset properties. 
</div> 
<h3>Parameters:</h3> 
<div class="table-container"> 
 <table class="params table"> 
  <thead> 
   <tr> 
    <th>Name</th> 
    <th>Type</th> 
    <th class="last">Description</th> 
   </tr> 
  </thead> 
  <tbody> 
   <tr class="deep-level-0"> 
    <td class="name"><code>x</code></td> 
    <td class="type"> <span class="param-type">number</span> </td> 
    <td class="description last">The x position in tiles.</td> 
   </tr> 
   <tr class="deep-level-0"> 
    <td class="name"><code>y</code></td> 
    <td class="type"> <span class="param-type">number</span> </td> 
    <td class="description last">The y position in tiles.</td> 
   </tr> 
   <tr class="deep-level-0"> 
    <td class="name"><code>layer</code></td> 
    <td class="type"> <span class="param-type">number</span> </td> 
    <td class="description last">The layer the tile is on.</td> 
   </tr> 
  </tbody> 
 </table> 
</div> 
<dl class="details"> 
 <p class="tag-source"> <a href="rpg-api.js.html" class="button">View Source</a> <span> <a href="rpg-api.js.html">rpg-api.js</a>, <a href="rpg-api.js.html#line774">line 774</a> </span> </p> 
</dl> 
<div class="columns method-parameter"> 
 <div class="column is-2">
  <label>Throws:</label>
 </div> 
 <div class="column is-10"> 
  <div class="columns"> 
   <div class="param-desc column is-12">
    "layer out of range" or "tile out of range"
   </div> 
  </div> 
 </div> 
</div> 
<div class="columns method-parameter"> 
 <div class="column is-2">
  <label>Returns:</label>
 </div> 
 <div class="column is-10"> 
  <div class="columns"> 
   <div class="param-desc column is-7">
    An object containing the tile's properties.
   </div> 
   <div class="column is-5 has-text-left"> 
    <label>Type: </label> 
    <span class="param-type">Map.TileData</span> 
   </div> 
  </div> 
 </div> 
</div> 
<h3>Example</h3> 
<pre class="prettyprint"><code>// Get the tile data at (10, 5, 1), and log the outputconst tileData = rpg.getTileData(10, 5, 1);console.log(tileData);</code></pre>]]></desc>
        </keyword>
        <keyword name="rpg.loadMap(map);" type="function" returnType="undefined" definedIn="rpg-api.js:line 718">
            <desc><![CDATA[<h4 class="name" id="loadMap"> <a class="href-link" href="#loadMap">#</a> <span class="tag">async</span> <span class="code-name"> loadMap<span class="signature">(map)</span><span class="type-signature"></span> </span> </h4> 
<div class="description">
  Loads the requested map. 
</div> 
<h3>Parameters:</h3> 
<div class="table-container"> 
 <table class="params table"> 
  <thead> 
   <tr> 
    <th>Name</th> 
    <th>Type</th> 
    <th class="last">Description</th> 
   </tr> 
  </thead> 
  <tbody> 
   <tr class="deep-level-0"> 
    <td class="name"><code>map</code></td> 
    <td class="type"> <span class="param-type">string</span> </td> 
    <td class="description last">Name of the map to load.</td> 
   </tr> 
  </tbody> 
 </table> 
</div> 
<dl class="details"> 
 <p class="tag-source"> <a href="rpg-api.js.html" class="button">View Source</a> <span> <a href="rpg-api.js.html">rpg-api.js</a>, <a href="rpg-api.js.html#line718">line 718</a> </span> </p> 
</dl> 
<h3>Example</h3> 
<pre class="prettyprint"><code>await rpg.loadMap("my-world.map");</code></pre>]]></desc>
        </keyword>
        <keyword name="rpg.removeLayerImage(imageId, layer);" type="function" returnType="undefined" definedIn="rpg-api.js:line 751">
            <desc><![CDATA[<h4 class="name" id="removeLayerImage"> <a class="href-link" href="#removeLayerImage">#</a> <span class="code-name"> removeLayerImage<span class="signature">(imageId, layer)</span><span class="type-signature"></span> </span> </h4> 
<div class="description">
  Removes the layer image from the map. 
</div> 
<h3>Parameters:</h3> 
<div class="table-container"> 
 <table class="params table"> 
  <thead> 
   <tr> 
    <th>Name</th> 
    <th>Type</th> 
    <th class="last">Description</th> 
   </tr> 
  </thead> 
  <tbody> 
   <tr class="deep-level-0"> 
    <td class="name"><code>imageId</code></td> 
    <td class="type"> <span class="param-type">string</span> </td> 
    <td class="description last">ID of the layer image.</td> 
   </tr> 
   <tr class="deep-level-0"> 
    <td class="name"><code>layer</code></td> 
    <td class="type"> <span class="param-type">string</span> </td> 
    <td class="description last">Layer index on the map, the first layer starts at 0.</td> 
   </tr> 
  </tbody> 
 </table> 
</div> 
<dl class="details"> 
 <p class="tag-source"> <a href="rpg-api.js.html" class="button">View Source</a> <span> <a href="rpg-api.js.html">rpg-api.js</a>, <a href="rpg-api.js.html#line751">line 751</a> </span> </p> 
</dl> 
<h3>Example</h3> 
<pre class="prettyprint"><code>rpg.removeLayerImage("my-image", 1);</code></pre>]]></desc>
        </keyword>
        <keyword name="rpg.removeTile(x, y, layer);" type="function" returnType="undefined" definedIn="rpg-api.js:line 823">
            <desc><![CDATA[<h4 class="name" id="removeTile"> <a class="href-link" href="#removeTile">#</a> <span class="code-name"> removeTile<span class="signature">(x, y, layer)</span><span class="type-signature"></span> </span> </h4> 
<div class="description">
  Removes the specified tile from the map. 
</div> 
<h3>Parameters:</h3> 
<div class="table-container"> 
 <table class="params table"> 
  <thead> 
   <tr> 
    <th>Name</th> 
    <th>Type</th> 
    <th class="last">Description</th> 
   </tr> 
  </thead> 
  <tbody> 
   <tr class="deep-level-0"> 
    <td class="name"><code>x</code></td> 
    <td class="type"> <span class="param-type">number</span> </td> 
    <td class="description last">TODO</td> 
   </tr> 
   <tr class="deep-level-0"> 
    <td class="name"><code>y</code></td> 
    <td class="type"> <span class="param-type">number</span> </td> 
    <td class="description last">TODO</td> 
   </tr> 
   <tr class="deep-level-0"> 
    <td class="name"><code>layer</code></td> 
    <td class="type"> <span class="param-type">number</span> </td> 
    <td class="description last">TODO</td> 
   </tr> 
  </tbody> 
 </table> 
</div> 
<dl class="details"> 
 <p class="tag-source"> <a href="rpg-api.js.html" class="button">View Source</a> <span> <a href="rpg-api.js.html">rpg-api.js</a>, <a href="rpg-api.js.html#line823">line 823</a> </span> </p> 
</dl> 
<h3>Example</h3> 
<pre class="prettyprint"><code>// Removes the tile at (x: 11, y: 9, layer: 1)rpg.removeTile(11, 9, 1);</code></pre>]]></desc>
        </keyword>
        <keyword name="rpg.replaceTile(x, y, layer, tilesetFile, tileIndex);" type="function" returnType="undefined" definedIn="rpg-api.js:line 805">
            <desc><![CDATA[<h4 class="name" id="replaceTile"> <a class="href-link" href="#replaceTile">#</a> <span class="code-name"> replaceTile<span class="signature">(x, y, layer, tilesetFile, tileIndex)</span><span class="type-signature"></span> </span> </h4> 
<div class="description">
  Replaces a tile at the supplied (x, y, layer) position. 
</div> 
<h3>Parameters:</h3> 
<div class="table-container"> 
 <table class="params table"> 
  <thead> 
   <tr> 
    <th>Name</th> 
    <th>Type</th> 
    <th class="last">Description</th> 
   </tr> 
  </thead> 
  <tbody> 
   <tr class="deep-level-0"> 
    <td class="name"><code>x</code></td> 
    <td class="type"> <span class="param-type">number</span> </td> 
    <td class="description last">The x position in tiles.</td> 
   </tr> 
   <tr class="deep-level-0"> 
    <td class="name"><code>y</code></td> 
    <td class="type"> <span class="param-type">number</span> </td> 
    <td class="description last">The y position in tiles.</td> 
   </tr> 
   <tr class="deep-level-0"> 
    <td class="name"><code>layer</code></td> 
    <td class="type"> <span class="param-type">number</span> </td> 
    <td class="description last">The layer the tile is on.</td> 
   </tr> 
   <tr class="deep-level-0"> 
    <td class="name"><code>tilesetFile</code></td> 
    <td class="type"> <span class="param-type">string</span> </td> 
    <td class="description last">The name of the Tileset of the replacement tile.</td> 
   </tr> 
   <tr class="deep-level-0"> 
    <td class="name"><code>tileIndex</code></td> 
    <td class="type"> <span class="param-type">number</span> </td> 
    <td class="description last">The index of the tile in the replacement Tileset.</td> 
   </tr> 
  </tbody> 
 </table> 
</div> 
<dl class="details"> 
 <p class="tag-source"> <a href="rpg-api.js.html" class="button">View Source</a> <span> <a href="rpg-api.js.html">rpg-api.js</a>, <a href="rpg-api.js.html#line805">line 805</a> </span> </p> 
</dl> 
<h3>Example</h3> 
<pre class="prettyprint"><code>rpg.replaceTile(11, 10, 0, "tileset1.tileset", 81);</code></pre>]]></desc>
        </keyword>
        <keyword name="rpg.registerMouseClick(callback, globalopt);" type="function" returnType="undefined" definedIn="rpg-api.js:line 1365">
            <desc><![CDATA[<h4 class="name" id="registerMouseClick"> <a class="href-link" href="#registerMouseClick">#</a> <span class="code-name"> registerMouseClick<span class="signature">(callback, global<span class="signature-attributes">opt</span>)</span><span class="type-signature"></span> </span> </h4> 
<div class="description">
  Registers a mouse move event callback, when the mouse is moved the supplied callback function will be called and provided with the current mouse state. The callback function will continue to be invoked for every mouse move event until it is unregistered. 
</div> 
<h3>Parameters:</h3> 
<div class="table-container"> 
 <table class="params table"> 
  <thead> 
   <tr> 
    <th>Name</th> 
    <th>Type</th> 
    <th>Attributes</th> 
    <th>Default</th> 
    <th class="last">Description</th> 
   </tr> 
  </thead> 
  <tbody> 
   <tr class="deep-level-0"> 
    <td class="name"><code>callback</code></td> 
    <td class="type"> <span class="param-type">Callback</span> </td> 
    <td class="attributes"> </td> 
    <td class="default"> </td> 
    <td class="description last">The callback function to invoke when the event fires.</td> 
   </tr> 
   <tr class="deep-level-0"> 
    <td class="name"><code>global</code></td> 
    <td class="type"> <span class="param-type">boolean</span> </td> 
    <td class="attributes"> &lt;optional&gt;<br> </td> 
    <td class="default"> false </td> 
    <td class="description last">Whether this should be globally applied in the engine.</td> 
   </tr> 
  </tbody> 
 </table> 
</div> 
<dl class="details"> 
 <p class="tag-source"> <a href="rpg-api.js.html" class="button">View Source</a> <span> <a href="rpg-api.js.html">rpg-api.js</a>, <a href="rpg-api.js.html#line1365">line 1365</a> </span> </p> 
</dl> 
<h3>Example</h3> 
<pre class="prettyprint"><code>rpg.registerMouseClick(async function(e) { // Log the x and y coordinates of the mouse. console.log(e.realX); console.log(e.realY); // Log the mouse button that has been clicked. console.log(e.mouseButton); // LEFT: 0, MIDDLE: 1, RIGHT: 2});</code></pre>]]></desc>
        </keyword>
        <keyword name="rpg.registerMouseDoubleClick(callback, globalopt);" type="function" returnType="undefined" definedIn="rpg-api.js:line 1417">
            <desc><![CDATA[<h4 class="name" id="registerMouseDoubleClick"> <a class="href-link" href="#registerMouseDoubleClick">#</a> <span class="code-name"> registerMouseDoubleClick<span class="signature">(callback, global<span class="signature-attributes">opt</span>)</span><span class="type-signature"></span> </span> </h4> 
<div class="description">
  Registers a mouse move event callback, when the mouse is moved the supplied callback function will be called and provided with the current mouse state. The callback function will continue to be invoked for every mouse move event until it is unregistered. 
</div> 
<h3>Parameters:</h3> 
<div class="table-container"> 
 <table class="params table"> 
  <thead> 
   <tr> 
    <th>Name</th> 
    <th>Type</th> 
    <th>Attributes</th> 
    <th>Default</th> 
    <th class="last">Description</th> 
   </tr> 
  </thead> 
  <tbody> 
   <tr class="deep-level-0"> 
    <td class="name"><code>callback</code></td> 
    <td class="type"> <span class="param-type">Callback</span> </td> 
    <td class="attributes"> </td> 
    <td class="default"> </td> 
    <td class="description last">The callback function to invoke when the event fires.</td> 
   </tr> 
   <tr class="deep-level-0"> 
    <td class="name"><code>global</code></td> 
    <td class="type"> <span class="param-type">boolean</span> </td> 
    <td class="attributes"> &lt;optional&gt;<br> </td> 
    <td class="default"> false </td> 
    <td class="description last">Whether this should be globally applied in the engine.</td> 
   </tr> 
  </tbody> 
 </table> 
</div> 
<dl class="details"> 
 <p class="tag-source"> <a href="rpg-api.js.html" class="button">View Source</a> <span> <a href="rpg-api.js.html">rpg-api.js</a>, <a href="rpg-api.js.html#line1417">line 1417</a> </span> </p> 
</dl> 
<h3>Example</h3> 
<pre class="prettyprint"><code>rpg.registerMouseDoubleClick(function(e) { // Log the x and y coordinates of the mouse. console.log(e.realX); console.log(e.realY); // Log the mouse button that has been double clicked. console.log(e.mouseButton); // LEFT: 0, MIDDLE: 1, RIGHT: 2});</code></pre>]]></desc>
        </keyword>
        <keyword name="rpg.registerMouseDown(callback, globalopt);" type="function" returnType="undefined" definedIn="rpg-api.js:line 1261">
            <desc><![CDATA[<h4 class="name" id="registerMouseDown"> <a class="href-link" href="#registerMouseDown">#</a> <span class="code-name"> registerMouseDown<span class="signature">(callback, global<span class="signature-attributes">opt</span>)</span><span class="type-signature"></span> </span> </h4> 
<div class="description">
  Registers a mouse down event callback, when the mouse is pressed down the supplied callback function will be called and provided with the current mouse state. The callback function will continue to be invoked for every mouse move event until it is unregistered. 
</div> 
<h3>Parameters:</h3> 
<div class="table-container"> 
 <table class="params table"> 
  <thead> 
   <tr> 
    <th>Name</th> 
    <th>Type</th> 
    <th>Attributes</th> 
    <th>Default</th> 
    <th class="last">Description</th> 
   </tr> 
  </thead> 
  <tbody> 
   <tr class="deep-level-0"> 
    <td class="name"><code>callback</code></td> 
    <td class="type"> <span class="param-type">Callback</span> </td> 
    <td class="attributes"> </td> 
    <td class="default"> </td> 
    <td class="description last">The callback function to invoke when the event fires.</td> 
   </tr> 
   <tr class="deep-level-0"> 
    <td class="name"><code>global</code></td> 
    <td class="type"> <span class="param-type">boolean</span> </td> 
    <td class="attributes"> &lt;optional&gt;<br> </td> 
    <td class="default"> false </td> 
    <td class="description last">Whether this should be globally applied in the engine.</td> 
   </tr> 
  </tbody> 
 </table> 
</div> 
<dl class="details"> 
 <p class="tag-source"> <a href="rpg-api.js.html" class="button">View Source</a> <span> <a href="rpg-api.js.html">rpg-api.js</a>, <a href="rpg-api.js.html#line1261">line 1261</a> </span> </p> 
</dl> 
<h3>Example</h3> 
<pre class="prettyprint"><code>rpg.registerMouseDown(async function(e) { // Log the x and y coordinates of the mouse. console.log(e.realX); console.log(e.realY); // Log the mouse button that has been pressed down. console.log(e.mouseButton); // LEFT: 0, MIDDLE: 1, RIGHT: 2});</code></pre>]]></desc>
        </keyword>
        <keyword name="rpg.registerMouseMove(callback, globalopt);" type="function" returnType="undefined" definedIn="rpg-api.js:line 1466">
            <desc><![CDATA[<h4 class="name" id="registerMouseMove"> <a class="href-link" href="#registerMouseMove">#</a> <span class="code-name"> registerMouseMove<span class="signature">(callback, global<span class="signature-attributes">opt</span>)</span><span class="type-signature"></span> </span> </h4> 
<div class="description">
  Registers a mouse move event callback, when the mouse is moved the supplied callback function will be called and provided with the current mouse state. The callback function will continue to be invoked for every mouse move event until it is unregistered. 
</div> 
<h3>Parameters:</h3> 
<div class="table-container"> 
 <table class="params table"> 
  <thead> 
   <tr> 
    <th>Name</th> 
    <th>Type</th> 
    <th>Attributes</th> 
    <th>Default</th> 
    <th class="last">Description</th> 
   </tr> 
  </thead> 
  <tbody> 
   <tr class="deep-level-0"> 
    <td class="name"><code>callback</code></td> 
    <td class="type"> <span class="param-type">Callback</span> </td> 
    <td class="attributes"> </td> 
    <td class="default"> </td> 
    <td class="description last">The callback function to invoke when the event fires.</td> 
   </tr> 
   <tr class="deep-level-0"> 
    <td class="name"><code>global</code></td> 
    <td class="type"> <span class="param-type">boolean</span> </td> 
    <td class="attributes"> &lt;optional&gt;<br> </td> 
    <td class="default"> false </td> 
    <td class="description last">Whether this should be globally applied in the engine.</td> 
   </tr> 
  </tbody> 
 </table> 
</div> 
<dl class="details"> 
 <p class="tag-source"> <a href="rpg-api.js.html" class="button">View Source</a> <span> <a href="rpg-api.js.html">rpg-api.js</a>, <a href="rpg-api.js.html#line1466">line 1466</a> </span> </p> 
</dl> 
<h3>Example</h3> 
<pre class="prettyprint"><code>rpg.registerMouseMove(async function(e) { // Log the x and y coordinates of the mouse. console.log(e.realX); console.log(e.realY);});</code></pre>]]></desc>
        </keyword>
        <keyword name="rpg.registerMouseUp(callback, globalopt);" type="function" returnType="undefined" definedIn="rpg-api.js:line 1313">
            <desc><![CDATA[<h4 class="name" id="registerMouseUp"> <a class="href-link" href="#registerMouseUp">#</a> <span class="code-name"> registerMouseUp<span class="signature">(callback, global<span class="signature-attributes">opt</span>)</span><span class="type-signature"></span> </span> </h4> 
<div class="description">
  Registers a mouse move event callback, when the mouse is moved the supplied callback function will be called and provided with the current mouse state. The callback function will continue to be invoked for every mouse move event until it is unregistered. 
</div> 
<h3>Parameters:</h3> 
<div class="table-container"> 
 <table class="params table"> 
  <thead> 
   <tr> 
    <th>Name</th> 
    <th>Type</th> 
    <th>Attributes</th> 
    <th>Default</th> 
    <th class="last">Description</th> 
   </tr> 
  </thead> 
  <tbody> 
   <tr class="deep-level-0"> 
    <td class="name"><code>callback</code></td> 
    <td class="type"> <span class="param-type">Callback</span> </td> 
    <td class="attributes"> </td> 
    <td class="default"> </td> 
    <td class="description last">The callback function to invoke when the event fires.</td> 
   </tr> 
   <tr class="deep-level-0"> 
    <td class="name"><code>global</code></td> 
    <td class="type"> <span class="param-type">boolean</span> </td> 
    <td class="attributes"> &lt;optional&gt;<br> </td> 
    <td class="default"> false </td> 
    <td class="description last">Whether this should be globally applied in the engine.</td> 
   </tr> 
  </tbody> 
 </table> 
</div> 
<dl class="details"> 
 <p class="tag-source"> <a href="rpg-api.js.html" class="button">View Source</a> <span> <a href="rpg-api.js.html">rpg-api.js</a>, <a href="rpg-api.js.html#line1313">line 1313</a> </span> </p> 
</dl> 
<h3>Example</h3> 
<pre class="prettyprint"><code>rpg.registerMouseUp(async function(e) { // Log the x and y coordinates of the mouse. console.log(e.realX); console.log(e.realY); // Log the mouse button that has been released. console.log(e.mouseButton); // LEFT: 0, MIDDLE: 1, RIGHT: 2});</code></pre>]]></desc>
        </keyword>
        <keyword name="rpg.unregisterMouseClick(globalopt);" type="function" returnType="undefined" definedIn="rpg-api.js:line 1387">
            <desc><![CDATA[<h4 class="name" id="unregisterMouseClick"> <a class="href-link" href="#unregisterMouseClick">#</a> <span class="code-name"> unregisterMouseClick<span class="signature">(global<span class="signature-attributes">opt</span>)</span><span class="type-signature"></span> </span> </h4> 
<div class="description">
  Removes a previously registered mouse click handler. 
</div> 
<h3>Parameters:</h3> 
<div class="table-container"> 
 <table class="params table"> 
  <thead> 
   <tr> 
    <th>Name</th> 
    <th>Type</th> 
    <th>Attributes</th> 
    <th>Default</th> 
    <th class="last">Description</th> 
   </tr> 
  </thead> 
  <tbody> 
   <tr class="deep-level-0"> 
    <td class="name"><code>global</code></td> 
    <td class="type"> <span class="param-type">boolean</span> </td> 
    <td class="attributes"> &lt;optional&gt;<br> </td> 
    <td class="default"> false </td> 
    <td class="description last">Whether this should be globally applied in the engine.</td> 
   </tr> 
  </tbody> 
 </table> 
</div> 
<dl class="details"> 
 <p class="tag-source"> <a href="rpg-api.js.html" class="button">View Source</a> <span> <a href="rpg-api.js.html">rpg-api.js</a>, <a href="rpg-api.js.html#line1387">line 1387</a> </span> </p> 
</dl> 
<h3>Example</h3> 
<pre class="prettyprint"><code>// Removes the mouse click handler local to this script.rpg.unregisterMouseClick();// Removes the global engine mouse click handler.rpg.unregisterMouseClick(true);</code></pre>]]></desc>
        </keyword>
        <keyword name="rpg.unregisterMouseDoubleClick(globalopt);" type="function" returnType="undefined" definedIn="rpg-api.js:line 1439">
            <desc><![CDATA[<h4 class="name" id="unregisterMouseDoubleClick"> <a class="href-link" href="#unregisterMouseDoubleClick">#</a> <span class="code-name"> unregisterMouseDoubleClick<span class="signature">(global<span class="signature-attributes">opt</span>)</span><span class="type-signature"></span> </span> </h4> 
<div class="description">
  Removes a previously registered mouse double click handler. 
</div> 
<h3>Parameters:</h3> 
<div class="table-container"> 
 <table class="params table"> 
  <thead> 
   <tr> 
    <th>Name</th> 
    <th>Type</th> 
    <th>Attributes</th> 
    <th>Default</th> 
    <th class="last">Description</th> 
   </tr> 
  </thead> 
  <tbody> 
   <tr class="deep-level-0"> 
    <td class="name"><code>global</code></td> 
    <td class="type"> <span class="param-type">boolean</span> </td> 
    <td class="attributes"> &lt;optional&gt;<br> </td> 
    <td class="default"> false </td> 
    <td class="description last">Whether this should be globally applied in the engine.</td> 
   </tr> 
  </tbody> 
 </table> 
</div> 
<dl class="details"> 
 <p class="tag-source"> <a href="rpg-api.js.html" class="button">View Source</a> <span> <a href="rpg-api.js.html">rpg-api.js</a>, <a href="rpg-api.js.html#line1439">line 1439</a> </span> </p> 
</dl> 
<h3>Example</h3> 
<pre class="prettyprint"><code>// Removes the mouse double click handler local to this script.rpg.unregisterMouseDoubleClick();// Removes the global engine mouse double click handler.rpg.unregisterMouseDoubleClick(true);</code></pre>]]></desc>
        </keyword>
        <keyword name="rpg.unregisterMouseDown(globalopt);" type="function" returnType="undefined" definedIn="rpg-api.js:line 1283">
            <desc><![CDATA[<h4 class="name" id="unregisterMouseDown"> <a class="href-link" href="#unregisterMouseDown">#</a> <span class="code-name"> unregisterMouseDown<span class="signature">(global<span class="signature-attributes">opt</span>)</span><span class="type-signature"></span> </span> </h4> 
<div class="description">
  Removes a previously registered mouse down handler. 
</div> 
<h3>Parameters:</h3> 
<div class="table-container"> 
 <table class="params table"> 
  <thead> 
   <tr> 
    <th>Name</th> 
    <th>Type</th> 
    <th>Attributes</th> 
    <th>Default</th> 
    <th class="last">Description</th> 
   </tr> 
  </thead> 
  <tbody> 
   <tr class="deep-level-0"> 
    <td class="name"><code>global</code></td> 
    <td class="type"> <span class="param-type">boolean</span> </td> 
    <td class="attributes"> &lt;optional&gt;<br> </td> 
    <td class="default"> false </td> 
    <td class="description last">Whether this should be globally applied in the engine.</td> 
   </tr> 
  </tbody> 
 </table> 
</div> 
<dl class="details"> 
 <p class="tag-source"> <a href="rpg-api.js.html" class="button">View Source</a> <span> <a href="rpg-api.js.html">rpg-api.js</a>, <a href="rpg-api.js.html#line1283">line 1283</a> </span> </p> 
</dl> 
<h3>Example</h3> 
<pre class="prettyprint"><code>// Removes the mouse down handler local to this script.rpg.unregisterMouseDown();// Removes the global engine mouse down handler.rpg.unregisterMouseDown(true);</code></pre>]]></desc>
        </keyword>
        <keyword name="rpg.unregisterMouseMove(globalopt);" type="function" returnType="undefined" definedIn="rpg-api.js:line 1488">
            <desc><![CDATA[<h4 class="name" id="unregisterMouseMove"> <a class="href-link" href="#unregisterMouseMove">#</a> <span class="code-name"> unregisterMouseMove<span class="signature">(global<span class="signature-attributes">opt</span>)</span><span class="type-signature"></span> </span> </h4> 
<div class="description">
  Removes a previously registered mouse move handler. 
</div> 
<h3>Parameters:</h3> 
<div class="table-container"> 
 <table class="params table"> 
  <thead> 
   <tr> 
    <th>Name</th> 
    <th>Type</th> 
    <th>Attributes</th> 
    <th>Default</th> 
    <th class="last">Description</th> 
   </tr> 
  </thead> 
  <tbody> 
   <tr class="deep-level-0"> 
    <td class="name"><code>global</code></td> 
    <td class="type"> <span class="param-type">boolean</span> </td> 
    <td class="attributes"> &lt;optional&gt;<br> </td> 
    <td class="default"> false </td> 
    <td class="description last">Whether this should be globally applied in the engine.</td> 
   </tr> 
  </tbody> 
 </table> 
</div> 
<dl class="details"> 
 <p class="tag-source"> <a href="rpg-api.js.html" class="button">View Source</a> <span> <a href="rpg-api.js.html">rpg-api.js</a>, <a href="rpg-api.js.html#line1488">line 1488</a> </span> </p> 
</dl> 
<h3>Example</h3> 
<pre class="prettyprint"><code>// Removes the mouse move handler local to this script.rpg.unregisterMouseMove();// Removes the global engine mouse move handler.rpg.unregisterMouseMove(true);</code></pre>]]></desc>
        </keyword>
        <keyword name="rpg.unregisterMouseUp(globalopt);" type="function" returnType="undefined" definedIn="rpg-api.js:line 1335">
            <desc><![CDATA[<h4 class="name" id="unregisterMouseUp"> <a class="href-link" href="#unregisterMouseUp">#</a> <span class="code-name"> unregisterMouseUp<span class="signature">(global<span class="signature-attributes">opt</span>)</span><span class="type-signature"></span> </span> </h4> 
<div class="description">
  Removes a previously registered mouse up handler. 
</div> 
<h3>Parameters:</h3> 
<div class="table-container"> 
 <table class="params table"> 
  <thead> 
   <tr> 
    <th>Name</th> 
    <th>Type</th> 
    <th>Attributes</th> 
    <th>Default</th> 
    <th class="last">Description</th> 
   </tr> 
  </thead> 
  <tbody> 
   <tr class="deep-level-0"> 
    <td class="name"><code>global</code></td> 
    <td class="type"> <span class="param-type">boolean</span> </td> 
    <td class="attributes"> &lt;optional&gt;<br> </td> 
    <td class="default"> false </td> 
    <td class="description last">Whether this should be globally applied in the engine.</td> 
   </tr> 
  </tbody> 
 </table> 
</div> 
<dl class="details"> 
 <p class="tag-source"> <a href="rpg-api.js.html" class="button">View Source</a> <span> <a href="rpg-api.js.html">rpg-api.js</a>, <a href="rpg-api.js.html#line1335">line 1335</a> </span> </p> 
</dl> 
<h3>Example</h3> 
<pre class="prettyprint"><code>// Removes the mouse up handler local to this script.rpg.unregisterMouseUp();// Removes the global engine mouse up handler.rpg.unregisterMouseUp(true);</code></pre>]]></desc>
        </keyword>
        <keyword name="rpg.addSprite(spriteId, layer, sprite);" type="function" returnType="undefined" definedIn="rpg-api.js:line 860">
            <desc><![CDATA[<h4 class="name" id="addSprite"> <a class="href-link" href="#addSprite">#</a> <span class="tag">async</span> <span class="code-name"> addSprite<span class="signature">(spriteId, layer, sprite)</span><span class="type-signature"></span> </span> </h4> 
<div class="description">
  Adds a sprite to the current map. 
</div> 
<h3>Parameters:</h3> 
<div class="table-container"> 
 <table class="params table"> 
  <thead> 
   <tr> 
    <th>Name</th> 
    <th>Type</th> 
    <th class="last">Description</th> 
   </tr> 
  </thead> 
  <tbody> 
   <tr class="deep-level-0"> 
    <td class="name"><code>spriteId</code></td> 
    <td class="type"> <span class="param-type">string</span> </td> 
    <td class="description last">TODO</td> 
   </tr> 
   <tr class="deep-level-0"> 
    <td class="name"><code>layer</code></td> 
    <td class="type"> <span class="param-type">number</span> </td> 
    <td class="description last">TODO</td> 
   </tr> 
   <tr class="deep-level-0"> 
    <td class="name"><code>sprite</code></td> 
    <td class="type"> <span class="param-type">Object</span> </td> 
    <td class="description last">TODO</td> 
   </tr> 
  </tbody> 
 </table> 
</div> 
<dl class="details"> 
 <p class="tag-source"> <a href="rpg-api.js.html" class="button">View Source</a> <span> <a href="rpg-api.js.html">rpg-api.js</a>, <a href="rpg-api.js.html#line860">line 860</a> </span> </p> 
</dl> 
<h3>Example</h3> 
<pre class="prettyprint"><code>// TODO</code></pre>]]></desc>
        </keyword>
        <keyword name="rpg.animateSprite(spriteId, animationId);" type="function" returnType="undefined" definedIn="rpg-api.js:line 969">
            <desc><![CDATA[<h4 class="name" id="animateSprite"> <a class="href-link" href="#animateSprite">#</a> <span class="tag">async</span> <span class="code-name"> animateSprite<span class="signature">(spriteId, animationId)</span><span class="type-signature"></span> </span> </h4> 
<div class="description">
  Animates the sprite using the requested animation. 
</div> 
<h3>Parameters:</h3> 
<div class="table-container"> 
 <table class="params table"> 
  <thead> 
   <tr> 
    <th>Name</th> 
    <th>Type</th> 
    <th class="last">Description</th> 
   </tr> 
  </thead> 
  <tbody> 
   <tr class="deep-level-0"> 
    <td class="name"><code>spriteId</code></td> 
    <td class="type"> <span class="param-type">string</span> </td> 
    <td class="description last">ID of the sprite.</td> 
   </tr> 
   <tr class="deep-level-0"> 
    <td class="name"><code>animationId</code></td> 
    <td class="type"> <span class="param-type">string</span> </td> 
    <td class="description last">ID of the animation on the sprite.</td> 
   </tr> 
  </tbody> 
 </table> 
</div> 
<dl class="details"> 
 <p class="tag-source"> <a href="rpg-api.js.html" class="button">View Source</a> <span> <a href="rpg-api.js.html">rpg-api.js</a>, <a href="rpg-api.js.html#line969">line 969</a> </span> </p> 
</dl> 
<h3>Example</h3> 
<pre class="prettyprint"><code>await rpg.animateSprite("my-sprite", "DANCE");</code></pre>]]></desc>
        </keyword>
        <keyword name="rpg.attachController(spriteId, controller);" type="function" returnType="undefined" definedIn="rpg-api.js:line 1066">
            <desc><![CDATA[<h4 class="name" id="attachController"> <a class="href-link" href="#attachController">#</a> <span class="code-name"> attachController<span class="signature">(spriteId, controller)</span><span class="type-signature"></span> </span> </h4> 
<div class="description">
  TODO 
</div> 
<h3>Parameters:</h3> 
<div class="table-container"> 
 <table class="params table"> 
  <thead> 
   <tr> 
    <th>Name</th> 
    <th>Type</th> 
    <th class="last">Description</th> 
   </tr> 
  </thead> 
  <tbody> 
   <tr class="deep-level-0"> 
    <td class="name"><code>spriteId</code></td> 
    <td class="type"> <span class="param-type">string</span> </td> 
    <td class="description last">TODO</td> 
   </tr> 
   <tr class="deep-level-0"> 
    <td class="name"><code>controller</code></td> 
    <td class="type"> <span class="param-type">Object</span> </td> 
    <td class="description last">TODO</td> 
   </tr> 
  </tbody> 
 </table> 
</div> 
<dl class="details"> 
 <p class="tag-source"> <a href="rpg-api.js.html" class="button">View Source</a> <span> <a href="rpg-api.js.html">rpg-api.js</a>, <a href="rpg-api.js.html#line1066">line 1066</a> </span> </p> 
</dl> 
<h3>Example</h3> 
<pre class="prettyprint"><code>// TODO</code></pre>]]></desc>
        </keyword>
        <keyword name="rpg.getSprite(spriteId);" type="function" returnType="{Asset.Sprite}" definedIn="rpg-api.js:line 841">
            <desc><![CDATA[<h4 class="name" id="getSprite"> <a class="href-link" href="#getSprite">#</a> <span class="code-name"> getSprite<span class="signature">(spriteId)</span><span class="type-signature"> → {Asset.Sprite}</span> </span> </h4> 
<div class="description">
  Gets the sprite by its ID. 
</div> 
<h3>Parameters:</h3> 
<div class="table-container"> 
 <table class="params table"> 
  <thead> 
   <tr> 
    <th>Name</th> 
    <th>Type</th> 
    <th class="last">Description</th> 
   </tr> 
  </thead> 
  <tbody> 
   <tr class="deep-level-0"> 
    <td class="name"><code>spriteId</code></td> 
    <td class="type"> <span class="param-type">string</span> </td> 
    <td class="description last"></td> 
   </tr> 
  </tbody> 
 </table> 
</div> 
<dl class="details"> 
 <p class="tag-source"> <a href="rpg-api.js.html" class="button">View Source</a> <span> <a href="rpg-api.js.html">rpg-api.js</a>, <a href="rpg-api.js.html#line841">line 841</a> </span> </p> 
</dl> 
<div class="columns method-parameter"> 
 <div class="column is-2">
  <label>Returns:</label>
 </div> 
 <div class="column is-10"> 
  <div class="columns"> 
   <div class="column is-5 has-text-left"> 
    <label>Type: </label> 
    <span class="param-type">Asset.Sprite</span> 
   </div> 
  </div> 
 </div> 
</div> 
<h3>Example</h3> 
<pre class="prettyprint"><code>const sprite = rpg.getSprite("my-sprite");console.log(sprite);</code></pre>]]></desc>
        </keyword>
        <keyword name="rpg.getSpriteDirection(spriteId);" type="function" returnType="{'NORTH'|'SOUTH'|'EAST'|'WEST'|'NORTH_EAST'|'SOUTH_EAST'|'NORTH_WEST'|'SOUTH_WEST'}" definedIn="rpg-api.js:line 894">
            <desc><![CDATA[<h4 class="name" id="getSpriteDirection"> <a class="href-link" href="#getSpriteDirection">#</a> <span class="code-name"> getSpriteDirection<span class="signature">(spriteId)</span><span class="type-signature"> → {'NORTH'|'SOUTH'|'EAST'|'WEST'|'NORTH_EAST'|'SOUTH_EAST'|'NORTH_WEST'|'SOUTH_WEST'}</span> </span> </h4> 
<div class="description">
  Gets the sprites's current direction. 
</div> 
<h3>Parameters:</h3> 
<div class="table-container"> 
 <table class="params table"> 
  <thead> 
   <tr> 
    <th>Name</th> 
    <th>Type</th> 
    <th class="last">Description</th> 
   </tr> 
  </thead> 
  <tbody> 
   <tr class="deep-level-0"> 
    <td class="name"><code>spriteId</code></td> 
    <td class="type"> <span class="param-type">string</span> </td> 
    <td class="description last">TODO</td> 
   </tr> 
  </tbody> 
 </table> 
</div> 
<dl class="details"> 
 <p class="tag-source"> <a href="rpg-api.js.html" class="button">View Source</a> <span> <a href="rpg-api.js.html">rpg-api.js</a>, <a href="rpg-api.js.html#line894">line 894</a> </span> </p> 
</dl> 
<div class="columns method-parameter"> 
 <div class="column is-2">
  <label>Returns:</label>
 </div> 
 <div class="column is-10"> 
  <div class="columns"> 
   <div class="column is-5 has-text-left"> 
    <label>Type: </label> 
    <span class="param-type">'NORTH'</span> | 
    <span class="param-type">'SOUTH'</span> | 
    <span class="param-type">'EAST'</span> | 
    <span class="param-type">'WEST'</span> | 
    <span class="param-type">'NORTH_EAST'</span> | 
    <span class="param-type">'SOUTH_EAST'</span> | 
    <span class="param-type">'NORTH_WEST'</span> | 
    <span class="param-type">'SOUTH_WEST'</span> 
   </div> 
  </div> 
 </div> 
</div> 
<h3>Example</h3> 
<pre class="prettyprint"><code>const direction = rpg.getSpriteDirection("my-sprite");console.log(direction);</code></pre>]]></desc>
        </keyword>
        <keyword name="rpg.getSpriteLocation(spriteId, inTiles, includeOffset);" type="function" returnType="{Geometry.Location}" definedIn="rpg-api.js:line 933">
            <desc><![CDATA[<h4 class="name" id="getSpriteLocation"> <a class="href-link" href="#getSpriteLocation">#</a> <span class="code-name"> getSpriteLocation<span class="signature">(spriteId, inTiles, includeOffset)</span><span class="type-signature"> → {Geometry.Location}</span> </span> </h4> 
<div class="description">
  Gets the sprites's current location, optionally including the visual offset that happens when maps are smaller than the viewport dimensions. 
</div> 
<h3>Parameters:</h3> 
<div class="table-container"> 
 <table class="params table"> 
  <thead> 
   <tr> 
    <th>Name</th> 
    <th>Type</th> 
    <th class="last">Description</th> 
   </tr> 
  </thead> 
  <tbody> 
   <tr class="deep-level-0"> 
    <td class="name"><code>spriteId</code></td> 
    <td class="type"> <span class="param-type">string</span> </td> 
    <td class="description last">ID of the sprite.</td> 
   </tr> 
   <tr class="deep-level-0"> 
    <td class="name"><code>inTiles</code></td> 
    <td class="type"> <span class="param-type">boolean</span> </td> 
    <td class="description last">Should the location be in tiles, otherwise pixels.</td> 
   </tr> 
   <tr class="deep-level-0"> 
    <td class="name"><code>includeOffset</code></td> 
    <td class="type"> <span class="param-type">boolean</span> </td> 
    <td class="description last">Should the location include the visual map offset.</td> 
   </tr> 
  </tbody> 
 </table> 
</div> 
<dl class="details"> 
 <p class="tag-source"> <a href="rpg-api.js.html" class="button">View Source</a> <span> <a href="rpg-api.js.html">rpg-api.js</a>, <a href="rpg-api.js.html#line933">line 933</a> </span> </p> 
</dl> 
<div class="columns method-parameter"> 
 <div class="column is-2">
  <label>Returns:</label>
 </div> 
 <div class="column is-10"> 
  <div class="columns"> 
   <div class="param-desc column is-7">
    An object containing the sprite's location.
   </div> 
   <div class="column is-5 has-text-left"> 
    <label>Type: </label> 
    <span class="param-type">Geometry.Location</span> 
   </div> 
  </div> 
 </div> 
</div> 
<h3>Example</h3> 
<pre class="prettyprint"><code>const location = rpg.getSpriteLocation("my-sprite", false, false);console.log(location);</code></pre>]]></desc>
        </keyword>
        <keyword name="rpg.moveSprite(spriteId, x, y, duration);" type="function" returnType="undefined" definedIn="rpg-api.js:line 988">
            <desc><![CDATA[<h4 class="name" id="moveSprite"> <a class="href-link" href="#moveSprite">#</a> <span class="tag">async</span> <span class="code-name"> moveSprite<span class="signature">(spriteId, x, y, duration)</span><span class="type-signature"></span> </span> </h4> 
<div class="description">
  Moves the sprite the sprite to the (x, y) location. 
</div> 
<h3>Parameters:</h3> 
<div class="table-container"> 
 <table class="params table"> 
  <thead> 
   <tr> 
    <th>Name</th> 
    <th>Type</th> 
    <th class="last">Description</th> 
   </tr> 
  </thead> 
  <tbody> 
   <tr class="deep-level-0"> 
    <td class="name"><code>spriteId</code></td> 
    <td class="type"> <span class="param-type">string</span> </td> 
    <td class="description last">ID of the sprite.</td> 
   </tr> 
   <tr class="deep-level-0"> 
    <td class="name"><code>x</code></td> 
    <td class="type"> <span class="param-type">number</span> </td> 
    <td class="description last">TODO</td> 
   </tr> 
   <tr class="deep-level-0"> 
    <td class="name"><code>y</code></td> 
    <td class="type"> <span class="param-type">number</span> </td> 
    <td class="description last">TODO</td> 
   </tr> 
   <tr class="deep-level-0"> 
    <td class="name"><code>duration</code></td> 
    <td class="type"> <span class="param-type">number</span> </td> 
    <td class="description last">TODO</td> 
   </tr> 
  </tbody> 
 </table> 
</div> 
<dl class="details"> 
 <p class="tag-source"> <a href="rpg-api.js.html" class="button">View Source</a> <span> <a href="rpg-api.js.html">rpg-api.js</a>, <a href="rpg-api.js.html#line988">line 988</a> </span> </p> 
</dl> 
<h3>Example</h3> 
<pre class="prettyprint"><code>await rpg.moveSprite("my-sprite", 100, 100, 1000)</code></pre>]]></desc>
        </keyword>
        <keyword name="rpg.removeSprite(spriteId);" type="function" returnType="undefined" definedIn="rpg-api.js:line 876">
            <desc><![CDATA[<h4 class="name" id="removeSprite"> <a class="href-link" href="#removeSprite">#</a> <span class="code-name"> removeSprite<span class="signature">(spriteId)</span><span class="type-signature"></span> </span> </h4> 
<div class="description">
  Removes a sprite from the current map. 
</div> 
<h3>Parameters:</h3> 
<div class="table-container"> 
 <table class="params table"> 
  <thead> 
   <tr> 
    <th>Name</th> 
    <th>Type</th> 
    <th class="last">Description</th> 
   </tr> 
  </thead> 
  <tbody> 
   <tr class="deep-level-0"> 
    <td class="name"><code>spriteId</code></td> 
    <td class="type"> <span class="param-type">string</span> </td> 
    <td class="description last">TODO</td> 
   </tr> 
  </tbody> 
 </table> 
</div> 
<dl class="details"> 
 <p class="tag-source"> <a href="rpg-api.js.html" class="button">View Source</a> <span> <a href="rpg-api.js.html">rpg-api.js</a>, <a href="rpg-api.js.html#line876">line 876</a> </span> </p> 
</dl> 
<h3>Example</h3> 
<pre class="prettyprint"><code>rpg.removeSprite("my-sprite");</code></pre>]]></desc>
        </keyword>
        <keyword name="rpg.resetTriggers(spriteId);" type="function" returnType="undefined" definedIn="rpg-api.js:line 1004">
            <desc><![CDATA[<h4 class="name" id="resetTriggers"> <a class="href-link" href="#resetTriggers">#</a> <span class="code-name"> resetTriggers<span class="signature">(spriteId)</span><span class="type-signature"></span> </span> </h4> 
<div class="description">
  TODO 
</div> 
<h3>Parameters:</h3> 
<div class="table-container"> 
 <table class="params table"> 
  <thead> 
   <tr> 
    <th>Name</th> 
    <th>Type</th> 
    <th class="last">Description</th> 
   </tr> 
  </thead> 
  <tbody> 
   <tr class="deep-level-0"> 
    <td class="name"><code>spriteId</code></td> 
    <td class="type"> <span class="param-type">string</span> </td> 
    <td class="description last">TODO</td> 
   </tr> 
  </tbody> 
 </table> 
</div> 
<dl class="details"> 
 <p class="tag-source"> <a href="rpg-api.js.html" class="button">View Source</a> <span> <a href="rpg-api.js.html">rpg-api.js</a>, <a href="rpg-api.js.html#line1004">line 1004</a> </span> </p> 
</dl> 
<h3>Example</h3> 
<pre class="prettyprint"><code>// TODO</code></pre>]]></desc>
        </keyword>
        <keyword name="rpg.setSpriteAnimation(spriteId, animationId);" type="function" returnType="undefined" definedIn="rpg-api.js:line 1049">
            <desc><![CDATA[<h4 class="name" id="setSpriteAnimation"> <a class="href-link" href="#setSpriteAnimation">#</a> <span class="code-name"> setSpriteAnimation<span class="signature">(spriteId, animationId)</span><span class="type-signature"></span> </span> </h4> 
<div class="description">
  Sets the sprite's current active animation. 
</div> 
<h3>Parameters:</h3> 
<div class="table-container"> 
 <table class="params table"> 
  <thead> 
   <tr> 
    <th>Name</th> 
    <th>Type</th> 
    <th class="last">Description</th> 
   </tr> 
  </thead> 
  <tbody> 
   <tr class="deep-level-0"> 
    <td class="name"><code>spriteId</code></td> 
    <td class="type"> <span class="param-type">string</span> </td> 
    <td class="description last">ID of the sprite.</td> 
   </tr> 
   <tr class="deep-level-0"> 
    <td class="name"><code>animationId</code></td> 
    <td class="type"> <span class="param-type">string</span> </td> 
    <td class="description last">ID of the animation on the sprite.</td> 
   </tr> 
  </tbody> 
 </table> 
</div> 
<dl class="details"> 
 <p class="tag-source"> <a href="rpg-api.js.html" class="button">View Source</a> <span> <a href="rpg-api.js.html">rpg-api.js</a>, <a href="rpg-api.js.html#line1049">line 1049</a> </span> </p> 
</dl> 
<h3>Example</h3> 
<pre class="prettyprint"><code>rpg.setSpriteAnimation("my-sprite", "DANCE");</code></pre>]]></desc>
        </keyword>
        <keyword name="rpg.setSpriteLocation(spriteId, x, y, layer, inTiles);" type="function" returnType="undefined" definedIn="rpg-api.js:line 1025">
            <desc><![CDATA[<h4 class="name" id="setSpriteLocation"> <a class="href-link" href="#setSpriteLocation">#</a> <span class="code-name"> setSpriteLocation<span class="signature">(spriteId, x, y, layer, inTiles)</span><span class="type-signature"></span> </span> </h4> 
<div class="description">
  Sets the location of the sprite. 
</div> 
<h3>Parameters:</h3> 
<div class="table-container"> 
 <table class="params table"> 
  <thead> 
   <tr> 
    <th>Name</th> 
    <th>Type</th> 
    <th class="last">Description</th> 
   </tr> 
  </thead> 
  <tbody> 
   <tr class="deep-level-0"> 
    <td class="name"><code>spriteId</code></td> 
    <td class="type"> <span class="param-type">string</span> </td> 
    <td class="description last">ID of the sprite.</td> 
   </tr> 
   <tr class="deep-level-0"> 
    <td class="name"><code>x</code></td> 
    <td class="type"> <span class="param-type">number</span> </td> 
    <td class="description last">In pixels by default.</td> 
   </tr> 
   <tr class="deep-level-0"> 
    <td class="name"><code>y</code></td> 
    <td class="type"> <span class="param-type">number</span> </td> 
    <td class="description last">In pixels by default.</td> 
   </tr> 
   <tr class="deep-level-0"> 
    <td class="name"><code>layer</code></td> 
    <td class="type"> <span class="param-type">number</span> </td> 
    <td class="description last">Target layer to put the sprite on.</td> 
   </tr> 
   <tr class="deep-level-0"> 
    <td class="name"><code>inTiles</code></td> 
    <td class="type"> <span class="param-type">boolean</span> </td> 
    <td class="description last">Is (x, y) in tile coordinates, defaults to pixels.</td> 
   </tr> 
  </tbody> 
 </table> 
</div> 
<dl class="details"> 
 <p class="tag-source"> <a href="rpg-api.js.html" class="button">View Source</a> <span> <a href="rpg-api.js.html">rpg-api.js</a>, <a href="rpg-api.js.html#line1025">line 1025</a> </span> </p> 
</dl> 
<h3>Example</h3> 
<pre class="prettyprint"><code>rpg.setSpriteLocation("my-sprite", 10, 10, 1, true);</code></pre>]]></desc>
        </keyword>
    </keywords>
</api>